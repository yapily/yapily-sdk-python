"""
    Yapily API

    The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.  # noqa: E501

    The version of the OpenAPI document: 2.13.1
    Contact: support@yapily.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from yapily.api_client import ApiClient, Endpoint as _Endpoint
from yapily.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from yapily.model.api_response_error import ApiResponseError
from yapily.model.api_response_of_payment_response import ApiResponseOfPaymentResponse
from yapily.model.api_response_of_payment_responses import ApiResponseOfPaymentResponses
from yapily.model.bulk_payment_request import BulkPaymentRequest
from yapily.model.payment_request import PaymentRequest


class PaymentsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.create_bulk_payment_endpoint = _Endpoint(
            settings={
                'response_type': (ApiResponseOfPaymentResponse,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/bulk-payments',
                'operation_id': 'create_bulk_payment',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'consent',
                    'bulk_payment_request',
                    'psu_id',
                    'psu_corporate_id',
                    'psu_ip_address',
                    'raw',
                ],
                'required': [
                    'consent',
                    'bulk_payment_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'consent':
                        (str,),
                    'bulk_payment_request':
                        (BulkPaymentRequest,),
                    'psu_id':
                        (str,),
                    'psu_corporate_id':
                        (str,),
                    'psu_ip_address':
                        (str,),
                    'raw':
                        (bool,),
                },
                'attribute_map': {
                    'consent': 'consent',
                    'psu_id': 'psu-id',
                    'psu_corporate_id': 'psu-corporate-id',
                    'psu_ip_address': 'psu-ip-address',
                    'raw': 'raw',
                },
                'location_map': {
                    'consent': 'header',
                    'bulk_payment_request': 'body',
                    'psu_id': 'header',
                    'psu_corporate_id': 'header',
                    'psu_ip_address': 'header',
                    'raw': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [
                    'application/json;charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.create_payment_endpoint = _Endpoint(
            settings={
                'response_type': (ApiResponseOfPaymentResponse,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/payments',
                'operation_id': 'create_payment',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'consent',
                    'payment_request',
                    'psu_id',
                    'psu_corporate_id',
                    'psu_ip_address',
                    'raw',
                ],
                'required': [
                    'consent',
                    'payment_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'consent':
                        (str,),
                    'payment_request':
                        (PaymentRequest,),
                    'psu_id':
                        (str,),
                    'psu_corporate_id':
                        (str,),
                    'psu_ip_address':
                        (str,),
                    'raw':
                        (bool,),
                },
                'attribute_map': {
                    'consent': 'consent',
                    'psu_id': 'psu-id',
                    'psu_corporate_id': 'psu-corporate-id',
                    'psu_ip_address': 'psu-ip-address',
                    'raw': 'raw',
                },
                'location_map': {
                    'consent': 'header',
                    'payment_request': 'body',
                    'psu_id': 'header',
                    'psu_corporate_id': 'header',
                    'psu_ip_address': 'header',
                    'raw': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [
                    'application/json;charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.get_payments_endpoint = _Endpoint(
            settings={
                'response_type': (ApiResponseOfPaymentResponses,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/payments/{paymentId}/details',
                'operation_id': 'get_payments',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'payment_id',
                    'consent',
                    'psu_id',
                    'psu_corporate_id',
                    'psu_ip_address',
                    'raw',
                ],
                'required': [
                    'payment_id',
                    'consent',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'payment_id':
                        (str,),
                    'consent':
                        (str,),
                    'psu_id':
                        (str,),
                    'psu_corporate_id':
                        (str,),
                    'psu_ip_address':
                        (str,),
                    'raw':
                        (bool,),
                },
                'attribute_map': {
                    'payment_id': 'paymentId',
                    'consent': 'consent',
                    'psu_id': 'psu-id',
                    'psu_corporate_id': 'psu-corporate-id',
                    'psu_ip_address': 'psu-ip-address',
                    'raw': 'raw',
                },
                'location_map': {
                    'payment_id': 'path',
                    'consent': 'header',
                    'psu_id': 'header',
                    'psu_corporate_id': 'header',
                    'psu_ip_address': 'header',
                    'raw': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def create_bulk_payment(
        self,
        consent,
        bulk_payment_request,
        **kwargs
    ):
        """Create Bulk Payment  # noqa: E501

        Used to initiate a bulk payment after obtaining the user's authorisation. <br><br>Feature: `CREATE_BULK_PAYMENT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_bulk_payment(consent, bulk_payment_request, async_req=True)
        >>> result = thread.get()

        Args:
            consent (str): __Mandatory__. The `consent-token` containing the user's authorisation to make the request.
            bulk_payment_request (BulkPaymentRequest):

        Keyword Args:
            psu_id (str): __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.. [optional]
            psu_corporate_id (str): __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.. [optional]
            psu_ip_address (str): __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.. [optional]
            raw (bool): __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ApiResponseOfPaymentResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['consent'] = \
            consent
        kwargs['bulk_payment_request'] = \
            bulk_payment_request
        return self.create_bulk_payment_endpoint.call_with_http_info(**kwargs)

    def create_payment(
        self,
        consent,
        payment_request,
        **kwargs
    ):
        """Create Payment  # noqa: E501

        Used to initiate a payment after obtaining the user's authorisation. <br><br>Features:<ul><li>`INITIATE_DOMESTIC_PERIODIC_PAYMENT`</li><li>`INITIATE_DOMESTIC_SCHEDULED_PAYMENT`</li><li>`INITIATE_DOMESTIC_SINGLE_INSTANT_PAYMENT`</li><li>`INITIATE_DOMESTIC_SINGLE_PAYMENT`</li><li>`INITIATE_DOMESTIC_VARIABLE_RECURRING_PAYMENT`</li><li>`INITIATE_INTERNATIONAL_PERIODIC_PAYMENT`</li><li>`INITIATE_INTERNATIONAL_SCHEDULED_PAYMENT`</li><li>`INITIATE_INTERNATIONAL_SINGLE_PAYMENT`</li></ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_payment(consent, payment_request, async_req=True)
        >>> result = thread.get()

        Args:
            consent (str): __Mandatory__. The `consent-token` containing the user's authorisation to make the request.
            payment_request (PaymentRequest):

        Keyword Args:
            psu_id (str): __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.. [optional]
            psu_corporate_id (str): __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.. [optional]
            psu_ip_address (str): __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.. [optional]
            raw (bool): __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ApiResponseOfPaymentResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['consent'] = \
            consent
        kwargs['payment_request'] = \
            payment_request
        return self.create_payment_endpoint.call_with_http_info(**kwargs)

    def get_payments(
        self,
        payment_id,
        consent,
        **kwargs
    ):
        """Get Payment Details  # noqa: E501

        Used to get the payment details of a payment. This is most commonly used to check for any updates to the payment status. <br><br>Feature: `EXISTING_PAYMENTS_DETAILS`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_payments(payment_id, consent, async_req=True)
        >>> result = thread.get()

        Args:
            payment_id (str): __Mandatory__. The payment Id of the payment.
            consent (str): __Mandatory__. The `consent-token` containing the user's authorisation to make the request.

        Keyword Args:
            psu_id (str): __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.. [optional]
            psu_corporate_id (str): __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.. [optional]
            psu_ip_address (str): __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.. [optional]
            raw (bool): __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ApiResponseOfPaymentResponses
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['payment_id'] = \
            payment_id
        kwargs['consent'] = \
            consent
        return self.get_payments_endpoint.call_with_http_info(**kwargs)

