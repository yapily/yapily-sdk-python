"""
    Yapily API

    The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.  # noqa: E501

    The version of the OpenAPI document: 2.15.0
    Contact: support@yapily.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from yapily.api_client import ApiClient, Endpoint as _Endpoint
from yapily.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from yapily.model.api_response_error import ApiResponseError
from yapily.model.api_response_of_financial_profile import ApiResponseOfFinancialProfile
from yapily.model.api_response_of_financial_profile_authorisation_response import ApiResponseOfFinancialProfileAuthorisationResponse
from yapily.model.api_response_of_financial_profile_balance_prediction import ApiResponseOfFinancialProfileBalancePrediction
from yapily.model.api_response_of_financial_profile_consent import ApiResponseOfFinancialProfileConsent
from yapily.model.api_response_of_financial_profile_consent_remove_response import ApiResponseOfFinancialProfileConsentRemoveResponse


class FinancialProfileApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.create_profile_consent_endpoint = _Endpoint(
            settings={
                'response_type': (ApiResponseOfFinancialProfileAuthorisationResponse,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/users/{userUuid}/profile/consents',
                'operation_id': 'create_profile_consent',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'user_uuid',
                    'consent',
                ],
                'required': [
                    'user_uuid',
                    'consent',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'user_uuid':
                        (str,),
                    'consent':
                        (str,),
                },
                'attribute_map': {
                    'user_uuid': 'userUuid',
                    'consent': 'consent',
                },
                'location_map': {
                    'user_uuid': 'path',
                    'consent': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.delete_profile_consent_endpoint = _Endpoint(
            settings={
                'response_type': (ApiResponseOfFinancialProfileConsentRemoveResponse,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/users/{userUuid}/profile/consents/{profileConsentId}',
                'operation_id': 'delete_profile_consent',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'user_uuid',
                    'profile_consent_id',
                ],
                'required': [
                    'user_uuid',
                    'profile_consent_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'user_uuid':
                        (str,),
                    'profile_consent_id':
                        (str,),
                },
                'attribute_map': {
                    'user_uuid': 'userUuid',
                    'profile_consent_id': 'profileConsentId',
                },
                'location_map': {
                    'user_uuid': 'path',
                    'profile_consent_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_balance_prediction_endpoint = _Endpoint(
            settings={
                'response_type': (ApiResponseOfFinancialProfileBalancePrediction,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/users/{userUuid}/profile/predicted-balances',
                'operation_id': 'get_balance_prediction',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'user_uuid',
                ],
                'required': [
                    'user_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'user_uuid':
                        (str,),
                },
                'attribute_map': {
                    'user_uuid': 'userUuid',
                },
                'location_map': {
                    'user_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_profile_consent_endpoint = _Endpoint(
            settings={
                'response_type': (ApiResponseOfFinancialProfileConsent,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/users/{userUuid}/profile/consents/{profileConsentId}',
                'operation_id': 'get_profile_consent',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'user_uuid',
                    'profile_consent_id',
                ],
                'required': [
                    'user_uuid',
                    'profile_consent_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'user_uuid':
                        (str,),
                    'profile_consent_id':
                        (str,),
                },
                'attribute_map': {
                    'user_uuid': 'userUuid',
                    'profile_consent_id': 'profileConsentId',
                },
                'location_map': {
                    'user_uuid': 'path',
                    'profile_consent_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_user_profile_endpoint = _Endpoint(
            settings={
                'response_type': (ApiResponseOfFinancialProfile,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/users/{userUuid}/profile',
                'operation_id': 'get_user_profile',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'user_uuid',
                ],
                'required': [
                    'user_uuid',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'user_uuid':
                        (str,),
                },
                'attribute_map': {
                    'user_uuid': 'userUuid',
                },
                'location_map': {
                    'user_uuid': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def create_profile_consent(
        self,
        user_uuid,
        consent,
        **kwargs
    ):
        """Create Profile Consent  # noqa: E501

        Used to add a consent to a `Financial Profile` for a `User`.  The response is asynchronous, returned with pending status, while retrieval of financial data is commenced.  There is a limit of 10,000 transactions for enrichment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_profile_consent(user_uuid, consent, async_req=True)
        >>> result = thread.get()

        Args:
            user_uuid (str): __Mandatory__. The Yapily generated UUID for the user.
            consent (str): __Mandatory__. The `consent-token` obtained from the original authorisation.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ApiResponseOfFinancialProfileAuthorisationResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['user_uuid'] = \
            user_uuid
        kwargs['consent'] = \
            consent
        return self.create_profile_consent_endpoint.call_with_http_info(**kwargs)

    def delete_profile_consent(
        self,
        user_uuid,
        profile_consent_id,
        **kwargs
    ):
        """Delete Profile Consent  # noqa: E501

        Used to delete a `ProfileConsent` for a `User`. This will remove the consent and all associated financial data from the 'Financial Profile'.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_profile_consent(user_uuid, profile_consent_id, async_req=True)
        >>> result = thread.get()

        Args:
            user_uuid (str): __Mandatory__. The Yapily generated UUID for the user.
            profile_consent_id (str): __Mandatory__. The ID of the ProfileConsent

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ApiResponseOfFinancialProfileConsentRemoveResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['user_uuid'] = \
            user_uuid
        kwargs['profile_consent_id'] = \
            profile_consent_id
        return self.delete_profile_consent_endpoint.call_with_http_info(**kwargs)

    def get_balance_prediction(
        self,
        user_uuid,
        **kwargs
    ):
        """Get Predicted Balances  # noqa: E501

        Used to retrieve a `Balance Prediction Profile` for a `User`.  Status will be `PENDING` until all ProfileConsents are `COMPLETED`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_balance_prediction(user_uuid, async_req=True)
        >>> result = thread.get()

        Args:
            user_uuid (str): __Mandatory__. The Yapily generated UUID for the user.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ApiResponseOfFinancialProfileBalancePrediction
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['user_uuid'] = \
            user_uuid
        return self.get_balance_prediction_endpoint.call_with_http_info(**kwargs)

    def get_profile_consent(
        self,
        user_uuid,
        profile_consent_id,
        **kwargs
    ):
        """Get Profile Consent  # noqa: E501

        Used to retreive a specific ProfileConsent for a User.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_profile_consent(user_uuid, profile_consent_id, async_req=True)
        >>> result = thread.get()

        Args:
            user_uuid (str): __Mandatory__. The Yapily generated UUID for the user.
            profile_consent_id (str): __Mandatory__. The ID of the ProfileConsent

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ApiResponseOfFinancialProfileConsent
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['user_uuid'] = \
            user_uuid
        kwargs['profile_consent_id'] = \
            profile_consent_id
        return self.get_profile_consent_endpoint.call_with_http_info(**kwargs)

    def get_user_profile(
        self,
        user_uuid,
        **kwargs
    ):
        """Get User Profile  # noqa: E501

        Used to retrieve a `FinancialProfile` for a `User`.  Status will be `PENDING` until all ProfileConsents are `COMPLETED`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_user_profile(user_uuid, async_req=True)
        >>> result = thread.get()

        Args:
            user_uuid (str): __Mandatory__. The Yapily generated UUID for the user.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ApiResponseOfFinancialProfile
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['user_uuid'] = \
            user_uuid
        return self.get_user_profile_endpoint.call_with_http_info(**kwargs)

