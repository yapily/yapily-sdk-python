"""
    Yapily API

    The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.  # noqa: E501

    The version of the OpenAPI document: 2.13.1
    Contact: support@yapily.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from yapily.api_client import ApiClient, Endpoint as _Endpoint
from yapily.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from yapily.model.api_error_response import ApiErrorResponse
from yapily.model.api_response_of_funds_confirmation_response import ApiResponseOfFundsConfirmationResponse
from yapily.model.api_response_of_non_sweeping_authorisation_response import ApiResponseOfNonSweepingAuthorisationResponse
from yapily.model.api_response_of_submission_response import ApiResponseOfSubmissionResponse
from yapily.model.api_response_of_sweeping_authorisation_response import ApiResponseOfSweepingAuthorisationResponse
from yapily.model.funds_confirmation_request import FundsConfirmationRequest
from yapily.model.non_sweeping_authorisation_request import NonSweepingAuthorisationRequest
from yapily.model.submission_request import SubmissionRequest
from yapily.model.sweeping_authorisation_request import SweepingAuthorisationRequest


class VariableRecurringPaymentsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.create_non_sweeping_authorisation_endpoint = _Endpoint(
            settings={
                'response_type': (ApiResponseOfNonSweepingAuthorisationResponse,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/variable-recurring-payments/non-sweeping/consents',
                'operation_id': 'create_non_sweeping_authorisation',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'non_sweeping_authorisation_request',
                ],
                'required': [
                    'non_sweeping_authorisation_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'non_sweeping_authorisation_request':
                        (NonSweepingAuthorisationRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'non_sweeping_authorisation_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [
                    'application/json;charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.create_sweeping_authorisation_endpoint = _Endpoint(
            settings={
                'response_type': (ApiResponseOfSweepingAuthorisationResponse,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/variable-recurring-payments/sweeping/consents',
                'operation_id': 'create_sweeping_authorisation',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'sweeping_authorisation_request',
                ],
                'required': [
                    'sweeping_authorisation_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'sweeping_authorisation_request':
                        (SweepingAuthorisationRequest,),
                },
                'attribute_map': {
                },
                'location_map': {
                    'sweeping_authorisation_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [
                    'application/json;charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.create_vrp_funds_confirmation_endpoint = _Endpoint(
            settings={
                'response_type': (ApiResponseOfFundsConfirmationResponse,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/variable-recurring-payments/funds-confirmation',
                'operation_id': 'create_vrp_funds_confirmation',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'consent',
                    'funds_confirmation_request',
                ],
                'required': [
                    'consent',
                    'funds_confirmation_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'consent':
                        (str,),
                    'funds_confirmation_request':
                        (FundsConfirmationRequest,),
                },
                'attribute_map': {
                    'consent': 'consent',
                },
                'location_map': {
                    'consent': 'header',
                    'funds_confirmation_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [
                    'application/json;charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.create_vrp_payment_endpoint = _Endpoint(
            settings={
                'response_type': (ApiResponseOfSubmissionResponse,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/variable-recurring-payments/payments',
                'operation_id': 'create_vrp_payment',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'consent',
                    'submission_request',
                ],
                'required': [
                    'consent',
                    'submission_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'consent':
                        (str,),
                    'submission_request':
                        (SubmissionRequest,),
                },
                'attribute_map': {
                    'consent': 'consent',
                },
                'location_map': {
                    'consent': 'header',
                    'submission_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [
                    'application/json;charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.get_sweeping_vrp_consent_by_id_endpoint = _Endpoint(
            settings={
                'response_type': (ApiResponseOfSweepingAuthorisationResponse,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/variable-recurring-payments/sweeping/consents/{consentId}',
                'operation_id': 'get_sweeping_vrp_consent_by_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'consent_id',
                ],
                'required': [
                    'consent_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'consent_id':
                        (str,),
                },
                'attribute_map': {
                    'consent_id': 'consentId',
                },
                'location_map': {
                    'consent_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_vrp_payment_details_endpoint = _Endpoint(
            settings={
                'response_type': (ApiResponseOfSubmissionResponse,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/variable-recurring-payments/payments/{paymentId}/details',
                'operation_id': 'get_vrp_payment_details',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'payment_id',
                    'consent',
                ],
                'required': [
                    'payment_id',
                    'consent',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'payment_id':
                        (str,),
                    'consent':
                        (str,),
                },
                'attribute_map': {
                    'payment_id': 'paymentId',
                    'consent': 'consent',
                },
                'location_map': {
                    'payment_id': 'path',
                    'consent': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.getp_non_sweeping_vrp_consent_by_id_endpoint = _Endpoint(
            settings={
                'response_type': (ApiResponseOfNonSweepingAuthorisationResponse,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/variable-recurring-payments/non-sweeping/consents/{consentId}',
                'operation_id': 'getp_non_sweeping_vrp_consent_by_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'consent_id',
                ],
                'required': [
                    'consent_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'consent_id':
                        (str,),
                },
                'attribute_map': {
                    'consent_id': 'consentId',
                },
                'location_map': {
                    'consent_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def create_non_sweeping_authorisation(
        self,
        non_sweeping_authorisation_request,
        **kwargs
    ):
        """Create Non-Sweeping Variable Recurring Payment Authorisation  # noqa: E501

        Used to initiate the authorisation process and direct users to the login screen of their financial Institution in order to give their consent for Non-Sweeping Variable Recurring Payments. The request would return an Authorization URL and an Identifier for the consent created at the Institution. First make sure that the payment feature you wish to execute is supported by the bank by checking the features array in [GET Institution](https://docs.yapily.com/api/#get-institution). <br><br>See [Redirect Payment Flows](https://docs.yapily.com/guides/payments/payment-authorisation-flows/redirect/) for more information about this flow.<br><br>Features:<ul><li>`INITIATE_DOMESTIC_VARIABLE_RECURRING_PAYMENT_NONSWEEPING`</li></ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_non_sweeping_authorisation(non_sweeping_authorisation_request, async_req=True)
        >>> result = thread.get()

        Args:
            non_sweeping_authorisation_request (NonSweepingAuthorisationRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ApiResponseOfNonSweepingAuthorisationResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['non_sweeping_authorisation_request'] = \
            non_sweeping_authorisation_request
        return self.create_non_sweeping_authorisation_endpoint.call_with_http_info(**kwargs)

    def create_sweeping_authorisation(
        self,
        sweeping_authorisation_request,
        **kwargs
    ):
        """Create Sweeping Variable Recurring Payment Authorisation  # noqa: E501

        Used to initiate the authorisation process and direct users to the login screen of their financial Institution in order to give their consent for Sweeping Variable Recurring Payments. The request would return an Authorization URL and an Identifier for the consent created at the Institution. First make sure that the payment feature you wish to execute is supported by the bank by checking the features array in [GET Institution](https://docs.yapily.com/api/#get-institution). <br><br>See [Redirect Payment Flows](https://docs.yapily.com/guides/payments/payment-authorisation-flows/redirect/) for more information about this flow.<br><br>Features:<ul><li>`INITIATE_DOMESTIC_VARIABLE_RECURRING_PAYMENT_SWEEPING`</li></ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_sweeping_authorisation(sweeping_authorisation_request, async_req=True)
        >>> result = thread.get()

        Args:
            sweeping_authorisation_request (SweepingAuthorisationRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ApiResponseOfSweepingAuthorisationResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['sweeping_authorisation_request'] = \
            sweeping_authorisation_request
        return self.create_sweeping_authorisation_endpoint.call_with_http_info(**kwargs)

    def create_vrp_funds_confirmation(
        self,
        consent,
        funds_confirmation_request,
        **kwargs
    ):
        """Confirm Funds for Variable Recurring Payment  # noqa: E501

        Used to confirm funds on the Payer account to execute Variable Recurring Payments after obtaining the user's authorisation. <br><br>Features:<ul><li>`VARIABLE_RECURRING_PAYMENT_FUNDS_CONFIRMATION`</li></ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_vrp_funds_confirmation(consent, funds_confirmation_request, async_req=True)
        >>> result = thread.get()

        Args:
            consent (str): __Mandatory__. The `consent-token` containing the user's authorisation to make the request.
            funds_confirmation_request (FundsConfirmationRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ApiResponseOfFundsConfirmationResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['consent'] = \
            consent
        kwargs['funds_confirmation_request'] = \
            funds_confirmation_request
        return self.create_vrp_funds_confirmation_endpoint.call_with_http_info(**kwargs)

    def create_vrp_payment(
        self,
        consent,
        submission_request,
        **kwargs
    ):
        """Create Variable Recurring Payment  # noqa: E501

        Used to submit a Variable Recurring Payments transaction after obtaining the user's authorisation. First make sure that the payment feature you wish to execute is supported by the bank by checking the features array in [GET Institution](https://docs.yapily.com/api/#get-institution). <br><br>Features:<ul><li>`CREATE_DOMESTIC_VARIABLE_RECURRING_PAYMENT_SWEEPING`</li><li>`CREATE_DOMESTIC_VARIABLE_RECURRING_PAYMENT_NONSWEEPING`</li></ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_vrp_payment(consent, submission_request, async_req=True)
        >>> result = thread.get()

        Args:
            consent (str): __Mandatory__. The `consent-token` containing the user's authorisation to make the request.
            submission_request (SubmissionRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ApiResponseOfSubmissionResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['consent'] = \
            consent
        kwargs['submission_request'] = \
            submission_request
        return self.create_vrp_payment_endpoint.call_with_http_info(**kwargs)

    def get_sweeping_vrp_consent_by_id(
        self,
        consent_id,
        **kwargs
    ):
        """Get Sweeping Variable Recurring Payment Consent Details  # noqa: E501

        Get Sweeping Variable Recurring Payments consent details using the consent Id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_sweeping_vrp_consent_by_id(consent_id, async_req=True)
        >>> result = thread.get()

        Args:
            consent_id (str): __Mandatory__. The consent Id of the `Variable Recurring Payments Consent` to retrieve.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ApiResponseOfSweepingAuthorisationResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['consent_id'] = \
            consent_id
        return self.get_sweeping_vrp_consent_by_id_endpoint.call_with_http_info(**kwargs)

    def get_vrp_payment_details(
        self,
        payment_id,
        consent,
        **kwargs
    ):
        """Get Variable Recurring Payment Details  # noqa: E501

        Get Variable Recurring Payment details using the Payment Id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_vrp_payment_details(payment_id, consent, async_req=True)
        >>> result = thread.get()

        Args:
            payment_id (str): __Mandatory__. The Payment Id of the `Variable Recurring Payments` to retrieve.
            consent (str): __Mandatory__. The consent token containing the user's authorisation to make the `Variable Recurring Payments` request.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ApiResponseOfSubmissionResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['payment_id'] = \
            payment_id
        kwargs['consent'] = \
            consent
        return self.get_vrp_payment_details_endpoint.call_with_http_info(**kwargs)

    def getp_non_sweeping_vrp_consent_by_id(
        self,
        consent_id,
        **kwargs
    ):
        """Get Non-Sweeping Variable Recurring Payment Consent Details  # noqa: E501

        Get Non-Sweeping Variable Recurring Payments consent details using the consent Id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.getp_non_sweeping_vrp_consent_by_id(consent_id, async_req=True)
        >>> result = thread.get()

        Args:
            consent_id (str): __Mandatory__. The consent Id of the `Variable Recurring Payments Consent` to retrieve.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ApiResponseOfNonSweepingAuthorisationResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['consent_id'] = \
            consent_id
        return self.getp_non_sweeping_vrp_consent_by_id_endpoint.call_with_http_info(**kwargs)

