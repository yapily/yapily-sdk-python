"""
    Yapily API

    The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.  # noqa: E501

    The version of the OpenAPI document: 2.13.1
    Contact: support@yapily.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from yapily.api_client import ApiClient, Endpoint as _Endpoint
from yapily.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from yapily.model.account_api_list_response import AccountApiListResponse
from yapily.model.api_list_response_of_account_statement import ApiListResponseOfAccountStatement
from yapily.model.api_list_response_of_beneficiary import ApiListResponseOfBeneficiary
from yapily.model.api_list_response_of_category import ApiListResponseOfCategory
from yapily.model.api_list_response_of_direct_debit_response import ApiListResponseOfDirectDebitResponse
from yapily.model.api_list_response_of_payment_response import ApiListResponseOfPaymentResponse
from yapily.model.api_list_response_of_transaction import ApiListResponseOfTransaction
from yapily.model.api_response_error import ApiResponseError
from yapily.model.api_response_of_account import ApiResponseOfAccount
from yapily.model.api_response_of_account_statement import ApiResponseOfAccountStatement
from yapily.model.api_response_of_balances import ApiResponseOfBalances
from yapily.model.api_response_of_identity import ApiResponseOfIdentity
from yapily.model.sort_enum import SortEnum


class FinancialDataApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.get_account_endpoint = _Endpoint(
            settings={
                'response_type': (ApiResponseOfAccount,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/accounts/{accountId}',
                'operation_id': 'get_account',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'account_id',
                    'consent',
                    'psu_id',
                    'psu_corporate_id',
                    'psu_ip_address',
                    'raw',
                ],
                'required': [
                    'account_id',
                    'consent',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_id':
                        (str,),
                    'consent':
                        (str,),
                    'psu_id':
                        (str,),
                    'psu_corporate_id':
                        (str,),
                    'psu_ip_address':
                        (str,),
                    'raw':
                        (bool,),
                },
                'attribute_map': {
                    'account_id': 'accountId',
                    'consent': 'consent',
                    'psu_id': 'psu-id',
                    'psu_corporate_id': 'psu-corporate-id',
                    'psu_ip_address': 'psu-ip-address',
                    'raw': 'raw',
                },
                'location_map': {
                    'account_id': 'path',
                    'consent': 'header',
                    'psu_id': 'header',
                    'psu_corporate_id': 'header',
                    'psu_ip_address': 'header',
                    'raw': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_account_balances_endpoint = _Endpoint(
            settings={
                'response_type': (ApiResponseOfBalances,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/accounts/{accountId}/balances',
                'operation_id': 'get_account_balances',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'account_id',
                    'consent',
                    'psu_id',
                    'psu_corporate_id',
                    'psu_ip_address',
                    'raw',
                ],
                'required': [
                    'account_id',
                    'consent',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_id':
                        (str,),
                    'consent':
                        (str,),
                    'psu_id':
                        (str,),
                    'psu_corporate_id':
                        (str,),
                    'psu_ip_address':
                        (str,),
                    'raw':
                        (bool,),
                },
                'attribute_map': {
                    'account_id': 'accountId',
                    'consent': 'consent',
                    'psu_id': 'psu-id',
                    'psu_corporate_id': 'psu-corporate-id',
                    'psu_ip_address': 'psu-ip-address',
                    'raw': 'raw',
                },
                'location_map': {
                    'account_id': 'path',
                    'consent': 'header',
                    'psu_id': 'header',
                    'psu_corporate_id': 'header',
                    'psu_ip_address': 'header',
                    'raw': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_account_direct_debits_endpoint = _Endpoint(
            settings={
                'response_type': (ApiListResponseOfDirectDebitResponse,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/accounts/{accountId}/direct-debits',
                'operation_id': 'get_account_direct_debits',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'account_id',
                    'consent',
                    'limit',
                    'raw',
                ],
                'required': [
                    'account_id',
                    'consent',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_id':
                        (str,),
                    'consent':
                        (str,),
                    'limit':
                        (int,),
                    'raw':
                        (bool,),
                },
                'attribute_map': {
                    'account_id': 'accountId',
                    'consent': 'consent',
                    'limit': 'limit',
                    'raw': 'raw',
                },
                'location_map': {
                    'account_id': 'path',
                    'consent': 'header',
                    'limit': 'query',
                    'raw': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_account_periodic_payments_endpoint = _Endpoint(
            settings={
                'response_type': (ApiListResponseOfPaymentResponse,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/accounts/{accountId}/periodic-payments',
                'operation_id': 'get_account_periodic_payments',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'account_id',
                    'consent',
                    'limit',
                    'raw',
                ],
                'required': [
                    'account_id',
                    'consent',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_id':
                        (str,),
                    'consent':
                        (str,),
                    'limit':
                        (int,),
                    'raw':
                        (bool,),
                },
                'attribute_map': {
                    'account_id': 'accountId',
                    'consent': 'consent',
                    'limit': 'limit',
                    'raw': 'raw',
                },
                'location_map': {
                    'account_id': 'path',
                    'consent': 'header',
                    'limit': 'query',
                    'raw': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_account_scheduled_payments_endpoint = _Endpoint(
            settings={
                'response_type': (ApiListResponseOfPaymentResponse,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/accounts/{accountId}/scheduled-payments',
                'operation_id': 'get_account_scheduled_payments',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'account_id',
                    'consent',
                    'limit',
                    'raw',
                ],
                'required': [
                    'account_id',
                    'consent',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_id':
                        (str,),
                    'consent':
                        (str,),
                    'limit':
                        (int,),
                    'raw':
                        (bool,),
                },
                'attribute_map': {
                    'account_id': 'accountId',
                    'consent': 'consent',
                    'limit': 'limit',
                    'raw': 'raw',
                },
                'location_map': {
                    'account_id': 'path',
                    'consent': 'header',
                    'limit': 'query',
                    'raw': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_accounts_endpoint = _Endpoint(
            settings={
                'response_type': (AccountApiListResponse,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/accounts',
                'operation_id': 'get_accounts',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'consent',
                    'psu_id',
                    'psu_corporate_id',
                    'psu_ip_address',
                    'raw',
                ],
                'required': [
                    'consent',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'consent':
                        (str,),
                    'psu_id':
                        (str,),
                    'psu_corporate_id':
                        (str,),
                    'psu_ip_address':
                        (str,),
                    'raw':
                        (bool,),
                },
                'attribute_map': {
                    'consent': 'consent',
                    'psu_id': 'psu-id',
                    'psu_corporate_id': 'psu-corporate-id',
                    'psu_ip_address': 'psu-ip-address',
                    'raw': 'raw',
                },
                'location_map': {
                    'consent': 'header',
                    'psu_id': 'header',
                    'psu_corporate_id': 'header',
                    'psu_ip_address': 'header',
                    'raw': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_beneficiaries_endpoint = _Endpoint(
            settings={
                'response_type': (ApiListResponseOfBeneficiary,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/accounts/{accountId}/beneficiaries',
                'operation_id': 'get_beneficiaries',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'account_id',
                    'consent',
                    'raw',
                ],
                'required': [
                    'account_id',
                    'consent',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_id':
                        (str,),
                    'consent':
                        (str,),
                    'raw':
                        (bool,),
                },
                'attribute_map': {
                    'account_id': 'accountId',
                    'consent': 'consent',
                    'raw': 'raw',
                },
                'location_map': {
                    'account_id': 'path',
                    'consent': 'header',
                    'raw': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_categories_endpoint = _Endpoint(
            settings={
                'response_type': (ApiListResponseOfCategory,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/categories/{country}',
                'operation_id': 'get_categories',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'country',
                ],
                'required': [
                    'country',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'country':
                        (str,),
                },
                'attribute_map': {
                    'country': 'country',
                },
                'location_map': {
                    'country': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_identity_endpoint = _Endpoint(
            settings={
                'response_type': (ApiResponseOfIdentity,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/identity',
                'operation_id': 'get_identity',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'consent',
                    'raw',
                ],
                'required': [
                    'consent',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'consent':
                        (str,),
                    'raw':
                        (bool,),
                },
                'attribute_map': {
                    'consent': 'consent',
                    'raw': 'raw',
                },
                'location_map': {
                    'consent': 'header',
                    'raw': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_statement_endpoint = _Endpoint(
            settings={
                'response_type': (ApiResponseOfAccountStatement,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/accounts/{accountId}/statements/{statementId}',
                'operation_id': 'get_statement',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'consent',
                    'account_id',
                    'statement_id',
                    'raw',
                ],
                'required': [
                    'consent',
                    'account_id',
                    'statement_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'consent':
                        (str,),
                    'account_id':
                        (str,),
                    'statement_id':
                        (str,),
                    'raw':
                        (bool,),
                },
                'attribute_map': {
                    'consent': 'consent',
                    'account_id': 'accountId',
                    'statement_id': 'statementId',
                    'raw': 'raw',
                },
                'location_map': {
                    'consent': 'header',
                    'account_id': 'path',
                    'statement_id': 'path',
                    'raw': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_statement_file_endpoint = _Endpoint(
            settings={
                'response_type': (file_type,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/accounts/{accountId}/statements/{statementId}/file',
                'operation_id': 'get_statement_file',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'consent',
                    'account_id',
                    'statement_id',
                    'raw',
                ],
                'required': [
                    'consent',
                    'account_id',
                    'statement_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'consent':
                        (str,),
                    'account_id':
                        (str,),
                    'statement_id':
                        (str,),
                    'raw':
                        (bool,),
                },
                'attribute_map': {
                    'consent': 'consent',
                    'account_id': 'accountId',
                    'statement_id': 'statementId',
                    'raw': 'raw',
                },
                'location_map': {
                    'consent': 'header',
                    'account_id': 'path',
                    'statement_id': 'path',
                    'raw': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/pdf',
                    'application/json;charset=UTF-8'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_statements_endpoint = _Endpoint(
            settings={
                'response_type': (ApiListResponseOfAccountStatement,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/accounts/{accountId}/statements',
                'operation_id': 'get_statements',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'consent',
                    'account_id',
                    '_from',
                    'before',
                    'limit',
                    'sort',
                    'offset',
                    'raw',
                ],
                'required': [
                    'consent',
                    'account_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'consent':
                        (str,),
                    'account_id':
                        (str,),
                    '_from':
                        (str,),
                    'before':
                        (str,),
                    'limit':
                        (int,),
                    'sort':
                        (SortEnum,),
                    'offset':
                        (int,),
                    'raw':
                        (bool,),
                },
                'attribute_map': {
                    'consent': 'consent',
                    'account_id': 'accountId',
                    '_from': 'from',
                    'before': 'before',
                    'limit': 'limit',
                    'sort': 'sort',
                    'offset': 'offset',
                    'raw': 'raw',
                },
                'location_map': {
                    'consent': 'header',
                    'account_id': 'path',
                    '_from': 'query',
                    'before': 'query',
                    'limit': 'query',
                    'sort': 'query',
                    'offset': 'query',
                    'raw': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_transactions_endpoint = _Endpoint(
            settings={
                'response_type': (ApiListResponseOfTransaction,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/accounts/{accountId}/transactions',
                'operation_id': 'get_transactions',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'account_id',
                    'consent',
                    'psu_id',
                    'psu_corporate_id',
                    'psu_ip_address',
                    '_with',
                    '_from',
                    'before',
                    'limit',
                    'sort',
                    'offset',
                    'cursor',
                    'raw',
                ],
                'required': [
                    'account_id',
                    'consent',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_id':
                        (str,),
                    'consent':
                        (str,),
                    'psu_id':
                        (str,),
                    'psu_corporate_id':
                        (str,),
                    'psu_ip_address':
                        (str,),
                    '_with':
                        ([str],),
                    '_from':
                        (str,),
                    'before':
                        (str,),
                    'limit':
                        (int,),
                    'sort':
                        (SortEnum,),
                    'offset':
                        (int,),
                    'cursor':
                        (str,),
                    'raw':
                        (bool,),
                },
                'attribute_map': {
                    'account_id': 'accountId',
                    'consent': 'consent',
                    'psu_id': 'psu-id',
                    'psu_corporate_id': 'psu-corporate-id',
                    'psu_ip_address': 'psu-ip-address',
                    '_with': 'with',
                    '_from': 'from',
                    'before': 'before',
                    'limit': 'limit',
                    'sort': 'sort',
                    'offset': 'offset',
                    'cursor': 'cursor',
                    'raw': 'raw',
                },
                'location_map': {
                    'account_id': 'path',
                    'consent': 'header',
                    'psu_id': 'header',
                    'psu_corporate_id': 'header',
                    'psu_ip_address': 'header',
                    '_with': 'query',
                    '_from': 'query',
                    'before': 'query',
                    'limit': 'query',
                    'sort': 'query',
                    'offset': 'query',
                    'cursor': 'query',
                    'raw': 'query',
                },
                'collection_format_map': {
                    '_with': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def get_account(
        self,
        account_id,
        consent,
        **kwargs
    ):
        """Get Account  # noqa: E501

        Used to return the account and balance information for the end user associated with the presented consent token.<br><br>Feature: `ACCOUNTS`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_account(account_id, consent, async_req=True)
        >>> result = thread.get()

        Args:
            account_id (str): __Mandatory__. The account Id of the user's bank account.
            consent (str): __Mandatory__. The `consent-token` containing the user's authorisation to make the request.

        Keyword Args:
            psu_id (str): __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.. [optional]
            psu_corporate_id (str): __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.. [optional]
            psu_ip_address (str): __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.. [optional]
            raw (bool): __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ApiResponseOfAccount
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['account_id'] = \
            account_id
        kwargs['consent'] = \
            consent
        return self.get_account_endpoint.call_with_http_info(**kwargs)

    def get_account_balances(
        self,
        account_id,
        consent,
        **kwargs
    ):
        """Get Account Balances  # noqa: E501

        Used to return the balance for the end user associated with the presented consent token.<br><br> __Note__: This endpoint is only for obtaining the balance information of an account belonging to an `Institution` that exposes their APIs through the [CBI Globe Gateway](https://docs.yapily.com/pages/knowledge/open-banking/cbi_globe//). If the `Institution` you wish to obtain balance data is not in the CBI Globe, use [Get Account](https://docs.yapily.com/api/reference/#operation/getAccount) or [Get Accounts](https://docs.yapily.com/api/reference/#operation/getAccounts) to get balance data. <br><br>Feature: `ACCOUNT_BALANCES`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_account_balances(account_id, consent, async_req=True)
        >>> result = thread.get()

        Args:
            account_id (str): __Mandatory__. The account Id of the user's bank account.
            consent (str): __Mandatory__. The `consent-token` containing the user's authorisation to make the request.

        Keyword Args:
            psu_id (str): __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.. [optional]
            psu_corporate_id (str): __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.. [optional]
            psu_ip_address (str): __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.. [optional]
            raw (bool): __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ApiResponseOfBalances
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['account_id'] = \
            account_id
        kwargs['consent'] = \
            consent
        return self.get_account_balances_endpoint.call_with_http_info(**kwargs)

    def get_account_direct_debits(
        self,
        account_id,
        consent,
        **kwargs
    ):
        """Get Account Direct Debits  # noqa: E501

        Used to get the list of direct debits for an account.<br><br>Feature: `ACCOUNT_DIRECT_DEBIT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_account_direct_debits(account_id, consent, async_req=True)
        >>> result = thread.get()

        Args:
            account_id (str): __Mandatory__. The account Id of the user's bank account.
            consent (str): __Mandatory__. The `consent-token` containing the user's authorisation to make the request.

        Keyword Args:
            limit (int): __Optional__. The maximum number of transaction records to be returned. Must be between 0 and 1000.. [optional]
            raw (bool): __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ApiListResponseOfDirectDebitResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['account_id'] = \
            account_id
        kwargs['consent'] = \
            consent
        return self.get_account_direct_debits_endpoint.call_with_http_info(**kwargs)

    def get_account_periodic_payments(
        self,
        account_id,
        consent,
        **kwargs
    ):
        """Get Account Periodic Payments  # noqa: E501

        Used to get the list of periodic payments (standing orders in the UK) for an account.<br><br>Feature: `ACCOUNT_PERIODIC_PAYMENTS`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_account_periodic_payments(account_id, consent, async_req=True)
        >>> result = thread.get()

        Args:
            account_id (str): __Mandatory__. The account Id of the user's bank account.
            consent (str): __Mandatory__. The `consent-token` containing the user's authorisation to make the request.

        Keyword Args:
            limit (int): __Optional__. The maximum number of transaction records to be returned. Must be between 0 and 1000.. [optional]
            raw (bool): __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ApiListResponseOfPaymentResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['account_id'] = \
            account_id
        kwargs['consent'] = \
            consent
        return self.get_account_periodic_payments_endpoint.call_with_http_info(**kwargs)

    def get_account_scheduled_payments(
        self,
        account_id,
        consent,
        **kwargs
    ):
        """Get Account Scheduled Payments  # noqa: E501

        Used to get the list of scheduled payments for an account.<br><br>Feature: `ACCOUNT_SCHEDULED_PAYMENT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_account_scheduled_payments(account_id, consent, async_req=True)
        >>> result = thread.get()

        Args:
            account_id (str): __Mandatory__. The account Id of the user's bank account.
            consent (str): __Mandatory__. The `consent-token` containing the user's authorisation to make the request.

        Keyword Args:
            limit (int): __Optional__. The maximum number of transaction records to be returned. Must be between 0 and 1000.. [optional]
            raw (bool): __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ApiListResponseOfPaymentResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['account_id'] = \
            account_id
        kwargs['consent'] = \
            consent
        return self.get_account_scheduled_payments_endpoint.call_with_http_info(**kwargs)

    def get_accounts(
        self,
        consent,
        **kwargs
    ):
        """Get Accounts  # noqa: E501

        Used to return all accounts and balances for the end user associated with the presented consent token.<br><br>Feature: `ACCOUNTS`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_accounts(consent, async_req=True)
        >>> result = thread.get()

        Args:
            consent (str): __Mandatory__. The `consent-token` containing the user's authorisation to make the request.

        Keyword Args:
            psu_id (str): __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.. [optional]
            psu_corporate_id (str): __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.. [optional]
            psu_ip_address (str): __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.. [optional]
            raw (bool): __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            AccountApiListResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['consent'] = \
            consent
        return self.get_accounts_endpoint.call_with_http_info(**kwargs)

    def get_beneficiaries(
        self,
        account_id,
        consent,
        **kwargs
    ):
        """Get Account Beneficiaries  # noqa: E501

        Used to get all the beneficiaries of a user's account<br><br>Feature: `ACCOUNT_BENEFICIARIES`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_beneficiaries(account_id, consent, async_req=True)
        >>> result = thread.get()

        Args:
            account_id (str): __Mandatory__. The account Id of the user's bank account.
            consent (str): __Mandatory__. The `consent-token` containing the user's authorisation to make the request.

        Keyword Args:
            raw (bool): __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ApiListResponseOfBeneficiary
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['account_id'] = \
            account_id
        kwargs['consent'] = \
            consent
        return self.get_beneficiaries_endpoint.call_with_http_info(**kwargs)

    def get_categories(
        self,
        country,
        **kwargs
    ):
        """Get Categories  # noqa: E501

        Used to retrieve the list of categories returned by the Yapily Categorisation engine for a given locale. <br><br>See [Data Enrichment](https://docs.yapily.com/pages/key-concepts/account-data/data-enrichment/intro-to-data-enrichment/) for more information.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_categories(country, async_req=True)
        >>> result = thread.get()

        Args:
            country (str): __Mandatory__. The 2 letter country code e.g. 'GB'.

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ApiListResponseOfCategory
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['country'] = \
            country
        return self.get_categories_endpoint.call_with_http_info(**kwargs)

    def get_identity(
        self,
        consent,
        **kwargs
    ):
        """Get Identity  # noqa: E501

        Used to get the identity information for an account.<br><br>Feature: `IDENTITY`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_identity(consent, async_req=True)
        >>> result = thread.get()

        Args:
            consent (str): __Mandatory__. The `consent-token` containing the user's authorisation to make the request.

        Keyword Args:
            raw (bool): __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ApiResponseOfIdentity
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['consent'] = \
            consent
        return self.get_identity_endpoint.call_with_http_info(**kwargs)

    def get_statement(
        self,
        consent,
        account_id,
        statement_id,
        **kwargs
    ):
        """Get Account Statement  # noqa: E501

        Used to get a statement for an account.<br><br>Feature: `ACCOUNT_STATEMENT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_statement(consent, account_id, statement_id, async_req=True)
        >>> result = thread.get()

        Args:
            consent (str): __Mandatory__. The `consent-token` containing the user's authorisation to make the request.
            account_id (str): __Mandatory__. The account Id of the user's bank account.
            statement_id (str): __Mandatory__. The statement Id of the statement file.

        Keyword Args:
            raw (bool): __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ApiResponseOfAccountStatement
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['consent'] = \
            consent
        kwargs['account_id'] = \
            account_id
        kwargs['statement_id'] = \
            statement_id
        return self.get_statement_endpoint.call_with_http_info(**kwargs)

    def get_statement_file(
        self,
        consent,
        account_id,
        statement_id,
        **kwargs
    ):
        """Get Account Statement File  # noqa: E501

        Used to get the statement file for an account.<br><br>Feature: `ACCOUNT_STATEMENT_FILE`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_statement_file(consent, account_id, statement_id, async_req=True)
        >>> result = thread.get()

        Args:
            consent (str): __Mandatory__. The `consent-token` containing the user's authorisation to make the request.
            account_id (str): __Mandatory__. The account Id of the user's bank account.
            statement_id (str): __Mandatory__. The statement Id of the statement file.

        Keyword Args:
            raw (bool): __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            file_type
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['consent'] = \
            consent
        kwargs['account_id'] = \
            account_id
        kwargs['statement_id'] = \
            statement_id
        return self.get_statement_file_endpoint.call_with_http_info(**kwargs)

    def get_statements(
        self,
        consent,
        account_id,
        **kwargs
    ):
        """Get Account Statements  # noqa: E501

        Used to get the list of statements for an account.<br><br>Feature: `ACCOUNT_STATEMENTS`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_statements(consent, account_id, async_req=True)
        >>> result = thread.get()

        Args:
            consent (str): __Mandatory__. The `consent-token` containing the user's authorisation to make the request.
            account_id (str): __Mandatory__. The account Id of the user's bank account.

        Keyword Args:
            _from (str): __Optional__. Returned transactions will be on or after this date (yyyy-MM-dd'T'HH:mm:ss.SSSZ). . [optional]
            before (str): __Optional__. Returned transactions will be on or before this date (yyyy-MM-dd'T'HH:mm:ss.SSSZ).. [optional]
            limit (int): __Optional__. The maximum number of transaction records to be returned. Must be between 0 and 1000.. [optional]
            sort (SortEnum): __Optional__. Sort transaction records by date ascending with 'date' or descending with '-date'. The default sort order is descending. [optional]
            offset (int): __Optional__. The number of transaction records to be skipped. Used primarily with paginated results.. [optional]
            raw (bool): __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ApiListResponseOfAccountStatement
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['consent'] = \
            consent
        kwargs['account_id'] = \
            account_id
        return self.get_statements_endpoint.call_with_http_info(**kwargs)

    def get_transactions(
        self,
        account_id,
        consent,
        **kwargs
    ):
        """Get Account Transactions  # noqa: E501

        Used to get the account transactions for an account<br><br>Feature: `ACCOUNT_TRANSACTIONS`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_transactions(account_id, consent, async_req=True)
        >>> result = thread.get()

        Args:
            account_id (str): __Mandatory__. The account Id of the user's bank account.
            consent (str): __Mandatory__. The `consent-token` containing the user's authorisation to make the request.

        Keyword Args:
            psu_id (str): __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.. [optional]
            psu_corporate_id (str): __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.. [optional]
            psu_ip_address (str): __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.. [optional]
            _with ([str]): __Optional__. Can be `categories` or `merchant`. When set, will include enrichment data in the transactions returned. <br><br>Enrichment data is optional, e.g. when 'merchant' enrichment data is requested, the enrichment response will include merchant data only if it can be evaluated from the transaction.. [optional]
            _from (str): __Optional__. Returned transactions will be on or after this date (yyyy-MM-dd'T'HH:mm:ss.SSSZ). . [optional]
            before (str): __Optional__. Returned transactions will be on or before this date (yyyy-MM-dd'T'HH:mm:ss.SSSZ).. [optional]
            limit (int): __Optional__. The maximum number of transaction records to be returned. Must be between 0 and 1000.. [optional]
            sort (SortEnum): __Optional__. Sort transaction records by date ascending with 'date' or descending with '-date'. The default sort order is descending. [optional]
            offset (int): __Optional__. The number of transaction records to be skipped. Used primarily with paginated results.. [optional]
            cursor (str): __Optional__. This property is not currently in use.. [optional]
            raw (bool): __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ApiListResponseOfTransaction
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['account_id'] = \
            account_id
        kwargs['consent'] = \
            consent
        return self.get_transactions_endpoint.call_with_http_info(**kwargs)

