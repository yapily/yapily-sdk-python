"""
    Yapily API

    The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.  # noqa: E501

    The version of the OpenAPI document: 2.13.1
    Contact: support@yapily.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from yapily.api_client import ApiClient, Endpoint as _Endpoint
from yapily.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from yapily.model.api_error_response import ApiErrorResponse
from yapily.model.api_list_response_of_virtual_account import ApiListResponseOfVirtualAccount
from yapily.model.api_list_response_of_virtual_account_beneficiary import ApiListResponseOfVirtualAccountBeneficiary
from yapily.model.api_list_response_of_virtual_account_client import ApiListResponseOfVirtualAccountClient
from yapily.model.api_list_response_of_virtual_account_payment import ApiListResponseOfVirtualAccountPayment
from yapily.model.api_response_of_virtual_account import ApiResponseOfVirtualAccount
from yapily.model.api_response_of_virtual_account_beneficiary import ApiResponseOfVirtualAccountBeneficiary
from yapily.model.api_response_of_virtual_account_client import ApiResponseOfVirtualAccountClient
from yapily.model.api_response_of_virtual_account_pay_in_details import ApiResponseOfVirtualAccountPayInDetails
from yapily.model.api_response_of_virtual_account_payment import ApiResponseOfVirtualAccountPayment
from yapily.model.update_virtual_account_request import UpdateVirtualAccountRequest
from yapily.model.virtual_account_beneficiary_request import VirtualAccountBeneficiaryRequest
from yapily.model.virtual_account_client_request import VirtualAccountClientRequest
from yapily.model.virtual_account_pay_out_request import VirtualAccountPayOutRequest
from yapily.model.virtual_account_request import VirtualAccountRequest
from yapily.model.virtual_account_transfer_request import VirtualAccountTransferRequest


class VirtualAccountsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.create_virtual_account_endpoint = _Endpoint(
            settings={
                'response_type': (ApiResponseOfVirtualAccount,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/virtual-accounts/accounts',
                'operation_id': 'create_virtual_account',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'client_id',
                    'virtual_account_request',
                ],
                'required': [
                    'client_id',
                    'virtual_account_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'client_id':
                        (str,),
                    'virtual_account_request':
                        (VirtualAccountRequest,),
                },
                'attribute_map': {
                    'client_id': 'client-id',
                },
                'location_map': {
                    'client_id': 'header',
                    'virtual_account_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json;charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.create_virtual_account_beneficiary_endpoint = _Endpoint(
            settings={
                'response_type': (ApiResponseOfVirtualAccountBeneficiary,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/virtual-accounts/beneficiaries',
                'operation_id': 'create_virtual_account_beneficiary',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'client_id',
                    'virtual_account_beneficiary_request',
                ],
                'required': [
                    'client_id',
                    'virtual_account_beneficiary_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'client_id':
                        (str,),
                    'virtual_account_beneficiary_request':
                        (VirtualAccountBeneficiaryRequest,),
                },
                'attribute_map': {
                    'client_id': 'client-id',
                },
                'location_map': {
                    'client_id': 'header',
                    'virtual_account_beneficiary_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json;charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.create_virtual_account_client_endpoint = _Endpoint(
            settings={
                'response_type': (ApiResponseOfVirtualAccountClient,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/virtual-accounts/clients',
                'operation_id': 'create_virtual_account_client',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'client_id',
                    'virtual_account_client_request',
                ],
                'required': [
                    'client_id',
                    'virtual_account_client_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'client_id':
                        (str,),
                    'virtual_account_client_request':
                        (VirtualAccountClientRequest,),
                },
                'attribute_map': {
                    'client_id': 'client-id',
                },
                'location_map': {
                    'client_id': 'header',
                    'virtual_account_client_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json;charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.create_virtual_account_pay_out_endpoint = _Endpoint(
            settings={
                'response_type': (ApiResponseOfVirtualAccountPayment,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/virtual-accounts/payments/pay-outs',
                'operation_id': 'create_virtual_account_pay_out',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'idempotency_key',
                    'client_id',
                    'virtual_account_pay_out_request',
                ],
                'required': [
                    'idempotency_key',
                    'client_id',
                    'virtual_account_pay_out_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'idempotency_key':
                        (str,),
                    'client_id':
                        (str,),
                    'virtual_account_pay_out_request':
                        (VirtualAccountPayOutRequest,),
                },
                'attribute_map': {
                    'idempotency_key': 'idempotency-key',
                    'client_id': 'client-id',
                },
                'location_map': {
                    'idempotency_key': 'header',
                    'client_id': 'header',
                    'virtual_account_pay_out_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json;charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.create_virtual_account_transfer_endpoint = _Endpoint(
            settings={
                'response_type': (ApiResponseOfVirtualAccountPayment,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/virtual-accounts/payments/transfers',
                'operation_id': 'create_virtual_account_transfer',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'idempotency_key',
                    'client_id',
                    'virtual_account_transfer_request',
                ],
                'required': [
                    'idempotency_key',
                    'client_id',
                    'virtual_account_transfer_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'idempotency_key':
                        (str,),
                    'client_id':
                        (str,),
                    'virtual_account_transfer_request':
                        (VirtualAccountTransferRequest,),
                },
                'attribute_map': {
                    'idempotency_key': 'idempotency-key',
                    'client_id': 'client-id',
                },
                'location_map': {
                    'idempotency_key': 'header',
                    'client_id': 'header',
                    'virtual_account_transfer_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json;charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.get_pay_in_details_endpoint = _Endpoint(
            settings={
                'response_type': (ApiResponseOfVirtualAccountPayInDetails,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/virtual-accounts/payments/{paymentId}/pay-in-details',
                'operation_id': 'get_pay_in_details',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'payment_id',
                ],
                'required': [
                    'payment_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'payment_id':
                        (str,),
                },
                'attribute_map': {
                    'payment_id': 'paymentId',
                },
                'location_map': {
                    'payment_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_payments_by_id_endpoint = _Endpoint(
            settings={
                'response_type': (ApiResponseOfVirtualAccountPayment,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/virtual-accounts/payments/{id}',
                'operation_id': 'get_payments_by_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'client_id',
                ],
                'required': [
                    'id',
                    'client_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str,),
                    'client_id':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'client_id': 'client-id',
                },
                'location_map': {
                    'id': 'path',
                    'client_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_virtual_account_beneficiaries_endpoint = _Endpoint(
            settings={
                'response_type': (ApiListResponseOfVirtualAccountBeneficiary,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/virtual-accounts/beneficiaries',
                'operation_id': 'get_virtual_account_beneficiaries',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'client_id',
                    'cursor',
                ],
                'required': [
                    'client_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'client_id':
                        (str,),
                    'cursor':
                        (str,),
                },
                'attribute_map': {
                    'client_id': 'client-id',
                    'cursor': 'cursor',
                },
                'location_map': {
                    'client_id': 'header',
                    'cursor': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_virtual_account_beneficiary_endpoint = _Endpoint(
            settings={
                'response_type': (ApiResponseOfVirtualAccountBeneficiary,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/virtual-accounts/beneficiaries/{beneficiaryId}',
                'operation_id': 'get_virtual_account_beneficiary',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'beneficiary_id',
                    'client_id',
                ],
                'required': [
                    'beneficiary_id',
                    'client_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'beneficiary_id':
                        (str,),
                    'client_id':
                        (str,),
                },
                'attribute_map': {
                    'beneficiary_id': 'beneficiaryId',
                    'client_id': 'client-id',
                },
                'location_map': {
                    'beneficiary_id': 'path',
                    'client_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_virtual_account_by_id_endpoint = _Endpoint(
            settings={
                'response_type': (ApiResponseOfVirtualAccount,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/virtual-accounts/accounts/{accountId}',
                'operation_id': 'get_virtual_account_by_id',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'account_id',
                    'client_id',
                ],
                'required': [
                    'account_id',
                    'client_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_id':
                        (str,),
                    'client_id':
                        (str,),
                },
                'attribute_map': {
                    'account_id': 'accountId',
                    'client_id': 'client-id',
                },
                'location_map': {
                    'account_id': 'path',
                    'client_id': 'header',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_virtual_account_clients_endpoint = _Endpoint(
            settings={
                'response_type': (ApiListResponseOfVirtualAccountClient,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/virtual-accounts/clients',
                'operation_id': 'get_virtual_account_clients',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'client_id',
                    'type',
                    'status',
                    'cursor',
                ],
                'required': [
                    'client_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'client_id':
                        (str,),
                    'type':
                        (str,),
                    'status':
                        (str,),
                    'cursor':
                        (str,),
                },
                'attribute_map': {
                    'client_id': 'client-id',
                    'type': 'type',
                    'status': 'status',
                    'cursor': 'cursor',
                },
                'location_map': {
                    'client_id': 'header',
                    'type': 'query',
                    'status': 'query',
                    'cursor': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_virtual_account_payments_endpoint = _Endpoint(
            settings={
                'response_type': (ApiListResponseOfVirtualAccountPayment,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/virtual-accounts/payments',
                'operation_id': 'get_virtual_account_payments',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'client_id',
                    'account_id',
                    'created_date_time_from',
                    'created_date_time_to',
                    'status',
                    'type',
                    'cursor',
                ],
                'required': [
                    'client_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'client_id':
                        (str,),
                    'account_id':
                        (str,),
                    'created_date_time_from':
                        (datetime,),
                    'created_date_time_to':
                        (datetime,),
                    'status':
                        ([str],),
                    'type':
                        ([str],),
                    'cursor':
                        (str,),
                },
                'attribute_map': {
                    'client_id': 'client-id',
                    'account_id': 'accountId',
                    'created_date_time_from': 'createdDateTimeFrom',
                    'created_date_time_to': 'createdDateTimeTo',
                    'status': 'status',
                    'type': 'type',
                    'cursor': 'cursor',
                },
                'location_map': {
                    'client_id': 'header',
                    'account_id': 'query',
                    'created_date_time_from': 'query',
                    'created_date_time_to': 'query',
                    'status': 'query',
                    'type': 'query',
                    'cursor': 'query',
                },
                'collection_format_map': {
                    'status': 'multi',
                    'type': 'multi',
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_virtual_accounts_endpoint = _Endpoint(
            settings={
                'response_type': (ApiListResponseOfVirtualAccount,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/virtual-accounts/accounts',
                'operation_id': 'get_virtual_accounts',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'client_id',
                    'nickname',
                    'currency',
                    'status',
                    'cursor',
                ],
                'required': [
                    'client_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'currency',
                ]
            },
            root_map={
                'validations': {
                    ('currency',): {

                        'regex': {
                            'pattern': r'^[A-Z]{3}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'client_id':
                        (str,),
                    'nickname':
                        (str,),
                    'currency':
                        (str,),
                    'status':
                        (str,),
                    'cursor':
                        (str,),
                },
                'attribute_map': {
                    'client_id': 'client-id',
                    'nickname': 'nickname',
                    'currency': 'currency',
                    'status': 'status',
                    'cursor': 'cursor',
                },
                'location_map': {
                    'client_id': 'header',
                    'nickname': 'query',
                    'currency': 'query',
                    'status': 'query',
                    'cursor': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.update_virtual_account_by_id_endpoint = _Endpoint(
            settings={
                'response_type': (ApiResponseOfVirtualAccount,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/virtual-accounts/accounts/{accountId}',
                'operation_id': 'update_virtual_account_by_id',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'account_id',
                    'client_id',
                    'update_virtual_account_request',
                ],
                'required': [
                    'account_id',
                    'client_id',
                    'update_virtual_account_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_id':
                        (str,),
                    'client_id':
                        (str,),
                    'update_virtual_account_request':
                        (UpdateVirtualAccountRequest,),
                },
                'attribute_map': {
                    'account_id': 'accountId',
                    'client_id': 'client-id',
                },
                'location_map': {
                    'account_id': 'path',
                    'client_id': 'header',
                    'update_virtual_account_request': 'body',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json'
                ],
                'content_type': [
                    'application/json;charset=UTF-8'
                ]
            },
            api_client=api_client
        )

    def create_virtual_account(
        self,
        client_id,
        virtual_account_request,
        **kwargs
    ):
        """Create Account  # noqa: E501

        Create a new virtual account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_virtual_account(client_id, virtual_account_request, async_req=True)
        >>> result = thread.get()

        Args:
            client_id (str): __Mandatory__. The customer or sub-customer id for which the request will be done
            virtual_account_request (VirtualAccountRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ApiResponseOfVirtualAccount
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['client_id'] = \
            client_id
        kwargs['virtual_account_request'] = \
            virtual_account_request
        return self.create_virtual_account_endpoint.call_with_http_info(**kwargs)

    def create_virtual_account_beneficiary(
        self,
        client_id,
        virtual_account_beneficiary_request,
        **kwargs
    ):
        """Create Beneficiary  # noqa: E501

        Create a new beneficiary (individual or business account) to which a Pay Out can be made. The beneficiary can be used from any virtual account that is held  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_virtual_account_beneficiary(client_id, virtual_account_beneficiary_request, async_req=True)
        >>> result = thread.get()

        Args:
            client_id (str): __Mandatory__. The customer or sub-customer id for which the request will be done
            virtual_account_beneficiary_request (VirtualAccountBeneficiaryRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ApiResponseOfVirtualAccountBeneficiary
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['client_id'] = \
            client_id
        kwargs['virtual_account_beneficiary_request'] = \
            virtual_account_beneficiary_request
        return self.create_virtual_account_beneficiary_endpoint.call_with_http_info(**kwargs)

    def create_virtual_account_client(
        self,
        client_id,
        virtual_account_client_request,
        **kwargs
    ):
        """Create Virtual Account Client  # noqa: E501

        Create a new virtual account client (individual or business client). Available for clients who have direct onboarding permissions only. Please contact your CSM to enquire about access  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_virtual_account_client(client_id, virtual_account_client_request, async_req=True)
        >>> result = thread.get()

        Args:
            client_id (str): __Mandatory__. This must be your master / parent client-id (and not one associated with one of your clients)
            virtual_account_client_request (VirtualAccountClientRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ApiResponseOfVirtualAccountClient
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['client_id'] = \
            client_id
        kwargs['virtual_account_client_request'] = \
            virtual_account_client_request
        return self.create_virtual_account_client_endpoint.call_with_http_info(**kwargs)

    def create_virtual_account_pay_out(
        self,
        idempotency_key,
        client_id,
        virtual_account_pay_out_request,
        **kwargs
    ):
        """Create Pay Out  # noqa: E501

        Initiate a payment from a specified virtual account to a previously added beneficiary using any of the schemes that it supports <br> When subscribed to virtualAccount.payOut.status notifications, further updates on payment processing status will be develivered asynchronously   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_virtual_account_pay_out(idempotency_key, client_id, virtual_account_pay_out_request, async_req=True)
        >>> result = thread.get()

        Args:
            idempotency_key (str): Uniquely identifies a request, such that requests made with a same value are considered retries <br> We recommend that a v4 UUID is supplied 
            client_id (str): __Mandatory__. The customer or sub-customer id for which the request will be done
            virtual_account_pay_out_request (VirtualAccountPayOutRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ApiResponseOfVirtualAccountPayment
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['idempotency_key'] = \
            idempotency_key
        kwargs['client_id'] = \
            client_id
        kwargs['virtual_account_pay_out_request'] = \
            virtual_account_pay_out_request
        return self.create_virtual_account_pay_out_endpoint.call_with_http_info(**kwargs)

    def create_virtual_account_transfer(
        self,
        idempotency_key,
        client_id,
        virtual_account_transfer_request,
        **kwargs
    ):
        """Create Virtual Account Transfer  # noqa: E501

        Create a transfer between two virtual accounts  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_virtual_account_transfer(idempotency_key, client_id, virtual_account_transfer_request, async_req=True)
        >>> result = thread.get()

        Args:
            idempotency_key (str): Uniquely identifies a request, such that requests made with a same value are considered retries <br> We recommend that a v4 UUID is supplied 
            client_id (str): __Mandatory__. The customer or sub-customer id for which the request will be done
            virtual_account_transfer_request (VirtualAccountTransferRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ApiResponseOfVirtualAccountPayment
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['idempotency_key'] = \
            idempotency_key
        kwargs['client_id'] = \
            client_id
        kwargs['virtual_account_transfer_request'] = \
            virtual_account_transfer_request
        return self.create_virtual_account_transfer_endpoint.call_with_http_info(**kwargs)

    def get_pay_in_details(
        self,
        payment_id,
        **kwargs
    ):
        """Get Pay-In Details  # noqa: E501

        Get the details of a pay-in transaction  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_pay_in_details(payment_id, async_req=True)
        >>> result = thread.get()

        Args:
            payment_id (str): Uniquely identifies a transaction

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ApiResponseOfVirtualAccountPayInDetails
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['payment_id'] = \
            payment_id
        return self.get_pay_in_details_endpoint.call_with_http_info(**kwargs)

    def get_payments_by_id(
        self,
        id,
        client_id,
        **kwargs
    ):
        """Get Payment  # noqa: E501

        Get the details of a specific payment using its Id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_payments_by_id(id, client_id, async_req=True)
        >>> result = thread.get()

        Args:
            id (str): __Mandatory__. The id of the payment
            client_id (str): __Mandatory__. The customer or sub-customer id for which the request will be done

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ApiResponseOfVirtualAccountPayment
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['id'] = \
            id
        kwargs['client_id'] = \
            client_id
        return self.get_payments_by_id_endpoint.call_with_http_info(**kwargs)

    def get_virtual_account_beneficiaries(
        self,
        client_id,
        **kwargs
    ):
        """Get List Of Beneficiaries  # noqa: E501

        Gets the list of beneficiaries (individual or business account) to which a Pay Out can be made.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_virtual_account_beneficiaries(client_id, async_req=True)
        >>> result = thread.get()

        Args:
            client_id (str): __Mandatory__. The customer or sub-customer id for which the request will be done

        Keyword Args:
            cursor (str): __Optional__. Data required to provide pagination. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ApiListResponseOfVirtualAccountBeneficiary
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['client_id'] = \
            client_id
        return self.get_virtual_account_beneficiaries_endpoint.call_with_http_info(**kwargs)

    def get_virtual_account_beneficiary(
        self,
        beneficiary_id,
        client_id,
        **kwargs
    ):
        """Get Beneficiary  # noqa: E501

        Get the details of a specific beneficiary (individual or business account) to which a Pay Out can be made from its id.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_virtual_account_beneficiary(beneficiary_id, client_id, async_req=True)
        >>> result = thread.get()

        Args:
            beneficiary_id (str): __Mandatory__. The Id of the requested beneficiary.
            client_id (str): __Mandatory__. The customer or sub-customer id for which the request will be done

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ApiResponseOfVirtualAccountBeneficiary
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['beneficiary_id'] = \
            beneficiary_id
        kwargs['client_id'] = \
            client_id
        return self.get_virtual_account_beneficiary_endpoint.call_with_http_info(**kwargs)

    def get_virtual_account_by_id(
        self,
        account_id,
        client_id,
        **kwargs
    ):
        """Get Account  # noqa: E501

        Get the details of a specific account using its Id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_virtual_account_by_id(account_id, client_id, async_req=True)
        >>> result = thread.get()

        Args:
            account_id (str): __Mandatory__. The Id of the account.
            client_id (str): __Mandatory__. The customer or sub-customer id for which the request will be done

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ApiResponseOfVirtualAccount
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['account_id'] = \
            account_id
        kwargs['client_id'] = \
            client_id
        return self.get_virtual_account_by_id_endpoint.call_with_http_info(**kwargs)

    def get_virtual_account_clients(
        self,
        client_id,
        **kwargs
    ):
        """Get List of Virtual Account Clients  # noqa: E501

        Get Virtual Account Clients (individual or business client).  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_virtual_account_clients(client_id, async_req=True)
        >>> result = thread.get()

        Args:
            client_id (str): __Mandatory__. This must be your master / parent client-id (and not one associated with one of your clients)

        Keyword Args:
            type (str): __Optional__.  Filter clients based on client type. One of BUSINESS or INDIVIDUAL. [optional]
            status (str): __Optional__.  Filter clients based on client status. One of ACTIVE, PENDING or SUSPENDED. [optional]
            cursor (str): __Optional__. Data required to provide pagination. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ApiListResponseOfVirtualAccountClient
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['client_id'] = \
            client_id
        return self.get_virtual_account_clients_endpoint.call_with_http_info(**kwargs)

    def get_virtual_account_payments(
        self,
        client_id,
        **kwargs
    ):
        """Get Payments  # noqa: E501

        Retrieve a list of virtual account payments  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_virtual_account_payments(client_id, async_req=True)
        >>> result = thread.get()

        Args:
            client_id (str): __Mandatory__. The customer or sub-customer id for which the request will be done

        Keyword Args:
            account_id (str): __Optional__. Filter payments based on accountId. [optional]
            created_date_time_from (datetime): __Optional__. Filter payments based on the createdDateTime. [optional]
            created_date_time_to (datetime): __Optional__. Filter payments based on the createdDateTime. [optional]
            status ([str]): __Optional__. Filter payments based on the payment status. One of INITIATED, PROCESSING, COMPLETED, FAILED. [optional]
            type ([str]): __Optional__. Filter payments based on the payment type. One of PAY_IN, PAY_OUT, RETURN_IN, RETURN_OUT. [optional]
            cursor (str): __Optional__. Data required to provide pagination. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ApiListResponseOfVirtualAccountPayment
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['client_id'] = \
            client_id
        return self.get_virtual_account_payments_endpoint.call_with_http_info(**kwargs)

    def get_virtual_accounts(
        self,
        client_id,
        **kwargs
    ):
        """Get Accounts  # noqa: E501

        Retrieve a list of all virtual accounts held  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_virtual_accounts(client_id, async_req=True)
        >>> result = thread.get()

        Args:
            client_id (str): __Mandatory__. The customer or sub-customer id for which the request will be done

        Keyword Args:
            nickname (str): __Optional__. Filter accounts based on reference provided in order to help with identification of the account. [optional]
            currency (str): __Optional__. Filter accounts based on three-letter ISO 4217 currency code. [optional]
            status (str): __Optional__. Filter accounts based on their current state. One of PENDING, ACTIVE, FAILED, SUSPENDED or CLOSED. [optional]
            cursor (str): __Optional__. Data required to provide pagination. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ApiListResponseOfVirtualAccount
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['client_id'] = \
            client_id
        return self.get_virtual_accounts_endpoint.call_with_http_info(**kwargs)

    def update_virtual_account_by_id(
        self,
        account_id,
        client_id,
        update_virtual_account_request,
        **kwargs
    ):
        """Update Account  # noqa: E501

        Update the details of a specific account using its Id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_virtual_account_by_id(account_id, client_id, update_virtual_account_request, async_req=True)
        >>> result = thread.get()

        Args:
            account_id (str): __Mandatory__. The Id of the account.
            client_id (str): __Mandatory__. The customer or sub-customer id for which the request will be done
            update_virtual_account_request (UpdateVirtualAccountRequest):

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ApiResponseOfVirtualAccount
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['account_id'] = \
            account_id
        kwargs['client_id'] = \
            client_id
        kwargs['update_virtual_account_request'] = \
            update_virtual_account_request
        return self.update_virtual_account_by_id_endpoint.call_with_http_info(**kwargs)

