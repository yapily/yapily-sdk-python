"""
    Yapily API

    The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.  # noqa: E501

    The version of the OpenAPI document: 2.13.1
    Contact: support@yapily.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from yapily.api_client import ApiClient, Endpoint as _Endpoint
from yapily.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from yapily.model.account_authorisation_request import AccountAuthorisationRequest
from yapily.model.api_response_error import ApiResponseError
from yapily.model.api_response_of_account_authorisation_response import ApiResponseOfAccountAuthorisationResponse
from yapily.model.api_response_of_embedded_account_authorisation_response import ApiResponseOfEmbeddedAccountAuthorisationResponse
from yapily.model.api_response_of_payment_authorisation_request_response import ApiResponseOfPaymentAuthorisationRequestResponse
from yapily.model.api_response_of_payment_embedded_authorisation_request_response import ApiResponseOfPaymentEmbeddedAuthorisationRequestResponse
from yapily.model.bulk_payment_authorisation_request import BulkPaymentAuthorisationRequest
from yapily.model.bulk_payment_embedded_authorisation_request import BulkPaymentEmbeddedAuthorisationRequest
from yapily.model.embedded_account_authorisation_request import EmbeddedAccountAuthorisationRequest
from yapily.model.payment_authorisation_request import PaymentAuthorisationRequest
from yapily.model.payment_embedded_authorisation_request import PaymentEmbeddedAuthorisationRequest
from yapily.model.payment_pre_authorisation_request import PaymentPreAuthorisationRequest
from yapily.model.pre_authorisation_request import PreAuthorisationRequest


class AuthorisationsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.create_bulk_payment_authorisation_endpoint = _Endpoint(
            settings={
                'response_type': (ApiResponseOfPaymentAuthorisationRequestResponse,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/bulk-payment-auth-requests',
                'operation_id': 'create_bulk_payment_authorisation',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'bulk_payment_authorisation_request',
                    'psu_id',
                    'psu_corporate_id',
                    'psu_ip_address',
                    'raw',
                ],
                'required': [
                    'bulk_payment_authorisation_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'bulk_payment_authorisation_request':
                        (BulkPaymentAuthorisationRequest,),
                    'psu_id':
                        (str,),
                    'psu_corporate_id':
                        (str,),
                    'psu_ip_address':
                        (str,),
                    'raw':
                        (bool,),
                },
                'attribute_map': {
                    'psu_id': 'psu-id',
                    'psu_corporate_id': 'psu-corporate-id',
                    'psu_ip_address': 'psu-ip-address',
                    'raw': 'raw',
                },
                'location_map': {
                    'bulk_payment_authorisation_request': 'body',
                    'psu_id': 'header',
                    'psu_corporate_id': 'header',
                    'psu_ip_address': 'header',
                    'raw': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [
                    'application/json;charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.create_embedded_bulk_payment_authorisation_endpoint = _Endpoint(
            settings={
                'response_type': (ApiResponseOfPaymentEmbeddedAuthorisationRequestResponse,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/embedded-bulk-payment-auth-requests',
                'operation_id': 'create_embedded_bulk_payment_authorisation',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'bulk_payment_embedded_authorisation_request',
                    'psu_id',
                    'psu_corporate_id',
                    'psu_ip_address',
                    'raw',
                ],
                'required': [
                    'bulk_payment_embedded_authorisation_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'bulk_payment_embedded_authorisation_request':
                        (BulkPaymentEmbeddedAuthorisationRequest,),
                    'psu_id':
                        (str,),
                    'psu_corporate_id':
                        (str,),
                    'psu_ip_address':
                        (str,),
                    'raw':
                        (bool,),
                },
                'attribute_map': {
                    'psu_id': 'psu-id',
                    'psu_corporate_id': 'psu-corporate-id',
                    'psu_ip_address': 'psu-ip-address',
                    'raw': 'raw',
                },
                'location_map': {
                    'bulk_payment_embedded_authorisation_request': 'body',
                    'psu_id': 'header',
                    'psu_corporate_id': 'header',
                    'psu_ip_address': 'header',
                    'raw': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [
                    'application/json;charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.create_embedded_payment_authorisation_endpoint = _Endpoint(
            settings={
                'response_type': (ApiResponseOfPaymentEmbeddedAuthorisationRequestResponse,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/embedded-payment-auth-requests',
                'operation_id': 'create_embedded_payment_authorisation',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'payment_embedded_authorisation_request',
                    'psu_id',
                    'psu_corporate_id',
                    'psu_ip_address',
                    'raw',
                ],
                'required': [
                    'payment_embedded_authorisation_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'payment_embedded_authorisation_request':
                        (PaymentEmbeddedAuthorisationRequest,),
                    'psu_id':
                        (str,),
                    'psu_corporate_id':
                        (str,),
                    'psu_ip_address':
                        (str,),
                    'raw':
                        (bool,),
                },
                'attribute_map': {
                    'psu_id': 'psu-id',
                    'psu_corporate_id': 'psu-corporate-id',
                    'psu_ip_address': 'psu-ip-address',
                    'raw': 'raw',
                },
                'location_map': {
                    'payment_embedded_authorisation_request': 'body',
                    'psu_id': 'header',
                    'psu_corporate_id': 'header',
                    'psu_ip_address': 'header',
                    'raw': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [
                    'application/json;charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.create_payment_authorisation_endpoint = _Endpoint(
            settings={
                'response_type': (ApiResponseOfPaymentAuthorisationRequestResponse,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/payment-auth-requests',
                'operation_id': 'create_payment_authorisation',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'payment_authorisation_request',
                    'psu_id',
                    'psu_corporate_id',
                    'psu_ip_address',
                    'raw',
                ],
                'required': [
                    'payment_authorisation_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'payment_authorisation_request':
                        (PaymentAuthorisationRequest,),
                    'psu_id':
                        (str,),
                    'psu_corporate_id':
                        (str,),
                    'psu_ip_address':
                        (str,),
                    'raw':
                        (bool,),
                },
                'attribute_map': {
                    'psu_id': 'psu-id',
                    'psu_corporate_id': 'psu-corporate-id',
                    'psu_ip_address': 'psu-ip-address',
                    'raw': 'raw',
                },
                'location_map': {
                    'payment_authorisation_request': 'body',
                    'psu_id': 'header',
                    'psu_corporate_id': 'header',
                    'psu_ip_address': 'header',
                    'raw': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [
                    'application/json;charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.create_payment_pre_authorisation_request_endpoint = _Endpoint(
            settings={
                'response_type': (ApiResponseOfAccountAuthorisationResponse,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/payment-pre-auth-requests',
                'operation_id': 'create_payment_pre_authorisation_request',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'payment_pre_authorisation_request',
                    'raw',
                ],
                'required': [
                    'payment_pre_authorisation_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'payment_pre_authorisation_request':
                        (PaymentPreAuthorisationRequest,),
                    'raw':
                        (bool,),
                },
                'attribute_map': {
                    'raw': 'raw',
                },
                'location_map': {
                    'payment_pre_authorisation_request': 'body',
                    'raw': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [
                    'application/json;charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.create_pre_authorisation_request_endpoint = _Endpoint(
            settings={
                'response_type': (ApiResponseOfAccountAuthorisationResponse,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/pre-auth-requests',
                'operation_id': 'create_pre_authorisation_request',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'pre_authorisation_request',
                    'raw',
                ],
                'required': [
                    'pre_authorisation_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'pre_authorisation_request':
                        (PreAuthorisationRequest,),
                    'raw':
                        (bool,),
                },
                'attribute_map': {
                    'raw': 'raw',
                },
                'location_map': {
                    'pre_authorisation_request': 'body',
                    'raw': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [
                    'application/json;charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.initiate_account_request_endpoint = _Endpoint(
            settings={
                'response_type': (ApiResponseOfAccountAuthorisationResponse,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/account-auth-requests',
                'operation_id': 'initiate_account_request',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'account_authorisation_request',
                    'psu_id',
                    'psu_corporate_id',
                    'psu_ip_address',
                    'raw',
                ],
                'required': [
                    'account_authorisation_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'account_authorisation_request':
                        (AccountAuthorisationRequest,),
                    'psu_id':
                        (str,),
                    'psu_corporate_id':
                        (str,),
                    'psu_ip_address':
                        (str,),
                    'raw':
                        (bool,),
                },
                'attribute_map': {
                    'psu_id': 'psu-id',
                    'psu_corporate_id': 'psu-corporate-id',
                    'psu_ip_address': 'psu-ip-address',
                    'raw': 'raw',
                },
                'location_map': {
                    'account_authorisation_request': 'body',
                    'psu_id': 'header',
                    'psu_corporate_id': 'header',
                    'psu_ip_address': 'header',
                    'raw': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [
                    'application/json;charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.initiate_embedded_account_request_endpoint = _Endpoint(
            settings={
                'response_type': (ApiResponseOfEmbeddedAccountAuthorisationResponse,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/embedded-account-auth-requests',
                'operation_id': 'initiate_embedded_account_request',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'embedded_account_authorisation_request',
                    'psu_id',
                    'psu_corporate_id',
                    'psu_ip_address',
                    'raw',
                ],
                'required': [
                    'embedded_account_authorisation_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'embedded_account_authorisation_request':
                        (EmbeddedAccountAuthorisationRequest,),
                    'psu_id':
                        (str,),
                    'psu_corporate_id':
                        (str,),
                    'psu_ip_address':
                        (str,),
                    'raw':
                        (bool,),
                },
                'attribute_map': {
                    'psu_id': 'psu-id',
                    'psu_corporate_id': 'psu-corporate-id',
                    'psu_ip_address': 'psu-ip-address',
                    'raw': 'raw',
                },
                'location_map': {
                    'embedded_account_authorisation_request': 'body',
                    'psu_id': 'header',
                    'psu_corporate_id': 'header',
                    'psu_ip_address': 'header',
                    'raw': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [
                    'application/json;charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.re_authorise_account_endpoint = _Endpoint(
            settings={
                'response_type': (ApiResponseOfAccountAuthorisationResponse,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/account-auth-requests',
                'operation_id': 're_authorise_account',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'consent',
                    'psu_id',
                    'psu_corporate_id',
                    'psu_ip_address',
                    'raw',
                ],
                'required': [
                    'consent',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'consent':
                        (str,),
                    'psu_id':
                        (str,),
                    'psu_corporate_id':
                        (str,),
                    'psu_ip_address':
                        (str,),
                    'raw':
                        (bool,),
                },
                'attribute_map': {
                    'consent': 'consent',
                    'psu_id': 'psu-id',
                    'psu_corporate_id': 'psu-corporate-id',
                    'psu_ip_address': 'psu-ip-address',
                    'raw': 'raw',
                },
                'location_map': {
                    'consent': 'header',
                    'psu_id': 'header',
                    'psu_corporate_id': 'header',
                    'psu_ip_address': 'header',
                    'raw': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.update_embedded_account_request_endpoint = _Endpoint(
            settings={
                'response_type': (ApiResponseOfEmbeddedAccountAuthorisationResponse,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/embedded-account-auth-requests/{consentId}',
                'operation_id': 'update_embedded_account_request',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'consent_id',
                    'embedded_account_authorisation_request',
                    'psu_id',
                    'psu_corporate_id',
                    'psu_ip_address',
                    'raw',
                ],
                'required': [
                    'consent_id',
                    'embedded_account_authorisation_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'consent_id':
                        (str,),
                    'embedded_account_authorisation_request':
                        (EmbeddedAccountAuthorisationRequest,),
                    'psu_id':
                        (str,),
                    'psu_corporate_id':
                        (str,),
                    'psu_ip_address':
                        (str,),
                    'raw':
                        (bool,),
                },
                'attribute_map': {
                    'consent_id': 'consentId',
                    'psu_id': 'psu-id',
                    'psu_corporate_id': 'psu-corporate-id',
                    'psu_ip_address': 'psu-ip-address',
                    'raw': 'raw',
                },
                'location_map': {
                    'consent_id': 'path',
                    'embedded_account_authorisation_request': 'body',
                    'psu_id': 'header',
                    'psu_corporate_id': 'header',
                    'psu_ip_address': 'header',
                    'raw': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [
                    'application/json;charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.update_embedded_bulk_payment_authorisation_endpoint = _Endpoint(
            settings={
                'response_type': (ApiResponseOfPaymentEmbeddedAuthorisationRequestResponse,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/embedded-bulk-payment-auth-requests/{consentId}',
                'operation_id': 'update_embedded_bulk_payment_authorisation',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'consent_id',
                    'bulk_payment_embedded_authorisation_request',
                    'psu_id',
                    'psu_corporate_id',
                    'psu_ip_address',
                    'raw',
                ],
                'required': [
                    'consent_id',
                    'bulk_payment_embedded_authorisation_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'consent_id':
                        (str,),
                    'bulk_payment_embedded_authorisation_request':
                        (BulkPaymentEmbeddedAuthorisationRequest,),
                    'psu_id':
                        (str,),
                    'psu_corporate_id':
                        (str,),
                    'psu_ip_address':
                        (str,),
                    'raw':
                        (bool,),
                },
                'attribute_map': {
                    'consent_id': 'consentId',
                    'psu_id': 'psu-id',
                    'psu_corporate_id': 'psu-corporate-id',
                    'psu_ip_address': 'psu-ip-address',
                    'raw': 'raw',
                },
                'location_map': {
                    'consent_id': 'path',
                    'bulk_payment_embedded_authorisation_request': 'body',
                    'psu_id': 'header',
                    'psu_corporate_id': 'header',
                    'psu_ip_address': 'header',
                    'raw': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [
                    'application/json;charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.update_embedded_payment_authorisation_endpoint = _Endpoint(
            settings={
                'response_type': (ApiResponseOfPaymentEmbeddedAuthorisationRequestResponse,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/embedded-payment-auth-requests/{consentId}',
                'operation_id': 'update_embedded_payment_authorisation',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'consent_id',
                    'payment_embedded_authorisation_request',
                    'psu_id',
                    'psu_corporate_id',
                    'psu_ip_address',
                    'raw',
                ],
                'required': [
                    'consent_id',
                    'payment_embedded_authorisation_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'consent_id':
                        (str,),
                    'payment_embedded_authorisation_request':
                        (PaymentEmbeddedAuthorisationRequest,),
                    'psu_id':
                        (str,),
                    'psu_corporate_id':
                        (str,),
                    'psu_ip_address':
                        (str,),
                    'raw':
                        (bool,),
                },
                'attribute_map': {
                    'consent_id': 'consentId',
                    'psu_id': 'psu-id',
                    'psu_corporate_id': 'psu-corporate-id',
                    'psu_ip_address': 'psu-ip-address',
                    'raw': 'raw',
                },
                'location_map': {
                    'consent_id': 'path',
                    'payment_embedded_authorisation_request': 'body',
                    'psu_id': 'header',
                    'psu_corporate_id': 'header',
                    'psu_ip_address': 'header',
                    'raw': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [
                    'application/json;charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.update_payment_authorisation_endpoint = _Endpoint(
            settings={
                'response_type': (ApiResponseOfPaymentAuthorisationRequestResponse,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/payment-auth-requests',
                'operation_id': 'update_payment_authorisation',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'consent',
                    'payment_authorisation_request',
                    'psu_id',
                    'psu_corporate_id',
                    'psu_ip_address',
                    'raw',
                ],
                'required': [
                    'consent',
                    'payment_authorisation_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'consent':
                        (str,),
                    'payment_authorisation_request':
                        (PaymentAuthorisationRequest,),
                    'psu_id':
                        (str,),
                    'psu_corporate_id':
                        (str,),
                    'psu_ip_address':
                        (str,),
                    'raw':
                        (bool,),
                },
                'attribute_map': {
                    'consent': 'consent',
                    'psu_id': 'psu-id',
                    'psu_corporate_id': 'psu-corporate-id',
                    'psu_ip_address': 'psu-ip-address',
                    'raw': 'raw',
                },
                'location_map': {
                    'consent': 'header',
                    'payment_authorisation_request': 'body',
                    'psu_id': 'header',
                    'psu_corporate_id': 'header',
                    'psu_ip_address': 'header',
                    'raw': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [
                    'application/json;charset=UTF-8'
                ]
            },
            api_client=api_client
        )
        self.update_pre_authorise_account_consent_endpoint = _Endpoint(
            settings={
                'response_type': (ApiResponseOfAccountAuthorisationResponse,),
                'auth': [
                    'basicAuth'
                ],
                'endpoint_path': '/account-auth-requests',
                'operation_id': 'update_pre_authorise_account_consent',
                'http_method': 'PUT',
                'servers': None,
            },
            params_map={
                'all': [
                    'consent',
                    'account_authorisation_request',
                    'psu_id',
                    'psu_corporate_id',
                    'psu_ip_address',
                    'raw',
                ],
                'required': [
                    'consent',
                    'account_authorisation_request',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'consent':
                        (str,),
                    'account_authorisation_request':
                        (AccountAuthorisationRequest,),
                    'psu_id':
                        (str,),
                    'psu_corporate_id':
                        (str,),
                    'psu_ip_address':
                        (str,),
                    'raw':
                        (bool,),
                },
                'attribute_map': {
                    'consent': 'consent',
                    'psu_id': 'psu-id',
                    'psu_corporate_id': 'psu-corporate-id',
                    'psu_ip_address': 'psu-ip-address',
                    'raw': 'raw',
                },
                'location_map': {
                    'consent': 'header',
                    'account_authorisation_request': 'body',
                    'psu_id': 'header',
                    'psu_corporate_id': 'header',
                    'psu_ip_address': 'header',
                    'raw': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;charset=UTF-8'
                ],
                'content_type': [
                    'application/json;charset=UTF-8'
                ]
            },
            api_client=api_client
        )

    def create_bulk_payment_authorisation(
        self,
        bulk_payment_authorisation_request,
        **kwargs
    ):
        """Create Bulk Payment Authorisation  # noqa: E501

        Used to initiate the authorisation process and direct users to the login screen of their financial Institution in order to give their consent for a bulk payment. See [Bulk Payments](https://docs.yapily.com/pages/key-concepts/payments/payment-execution/bulk-payments/) for more information. <br><br>See [Redirect Payment Flows](https://docs.yapily.com/pages/key-concepts/payments/payment-authorisation/redirect-payment-flows/) for more information about this flow.<br><br>Feature: `INITIATE_BULK_PAYMENT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_bulk_payment_authorisation(bulk_payment_authorisation_request, async_req=True)
        >>> result = thread.get()

        Args:
            bulk_payment_authorisation_request (BulkPaymentAuthorisationRequest):

        Keyword Args:
            psu_id (str): __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.. [optional]
            psu_corporate_id (str): __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.. [optional]
            psu_ip_address (str): __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.. [optional]
            raw (bool): __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ApiResponseOfPaymentAuthorisationRequestResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['bulk_payment_authorisation_request'] = \
            bulk_payment_authorisation_request
        return self.create_bulk_payment_authorisation_endpoint.call_with_http_info(**kwargs)

    def create_embedded_bulk_payment_authorisation(
        self,
        bulk_payment_embedded_authorisation_request,
        **kwargs
    ):
        """Create Embedded Bulk Payment Authorisation  # noqa: E501

        Used to initiate the embedded authorisation process for an `Institution` that contains the `INITIATE_EMBEDDED_BULK_PAYMENT` feature in order to obtain the the user's authorisation for a bulk payment. See [Bulk Payments](https://docs.yapily.com/pages/key-concepts/payments/payment-execution/bulk-payments/) for more information. <br><br> See [Embedded Payment Flows](https://docs.yapily.com/pages/key-concepts/payments/payment-authorisation/embedded-payment-flows/) for more information about this flow.<br><br>Feature: `INITIATE_EMBEDDED_BULK_PAYMENT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_embedded_bulk_payment_authorisation(bulk_payment_embedded_authorisation_request, async_req=True)
        >>> result = thread.get()

        Args:
            bulk_payment_embedded_authorisation_request (BulkPaymentEmbeddedAuthorisationRequest):

        Keyword Args:
            psu_id (str): __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.. [optional]
            psu_corporate_id (str): __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.. [optional]
            psu_ip_address (str): __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.. [optional]
            raw (bool): __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ApiResponseOfPaymentEmbeddedAuthorisationRequestResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['bulk_payment_embedded_authorisation_request'] = \
            bulk_payment_embedded_authorisation_request
        return self.create_embedded_bulk_payment_authorisation_endpoint.call_with_http_info(**kwargs)

    def create_embedded_payment_authorisation(
        self,
        payment_embedded_authorisation_request,
        **kwargs
    ):
        """Create Embedded Payment Authorisation  # noqa: E501

        Used to initiate the embedded authorisation process for an `Institution` that contains the `INITIATE_EMBEDDED_DOMESTIC_SINGLE_PAYMENT` feature in order to obtain the the user's authorisation for a payment.<br><br> See [Embedded Payment Flows](https://docs.yapily.com/pages/key-concepts/payments/payment-authorisation/embedded-payment-flows/) for more information about this flow.<br><br>Feature: `INITIATE_EMBEDDED_DOMESTIC_SINGLE_PAYMENT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_embedded_payment_authorisation(payment_embedded_authorisation_request, async_req=True)
        >>> result = thread.get()

        Args:
            payment_embedded_authorisation_request (PaymentEmbeddedAuthorisationRequest):

        Keyword Args:
            psu_id (str): __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.. [optional]
            psu_corporate_id (str): __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.. [optional]
            psu_ip_address (str): __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.. [optional]
            raw (bool): __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ApiResponseOfPaymentEmbeddedAuthorisationRequestResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['payment_embedded_authorisation_request'] = \
            payment_embedded_authorisation_request
        return self.create_embedded_payment_authorisation_endpoint.call_with_http_info(**kwargs)

    def create_payment_authorisation(
        self,
        payment_authorisation_request,
        **kwargs
    ):
        """Create Payment Authorisation  # noqa: E501

        Used to initiate the authorisation process and direct users to the login screen of their financial Institution in order to give their consent for a payment. This endpoint is used to initiate all the different payment listed below. Based on the type of payment you wish to make, you may be required to provide specific properties in [PaymentRequest](https://docs.yapily.com/api/reference/#operation/createPaymentAuthorisation!path=paymentRequest&t=request). First make sure that the payment feature you wish to execute is supported by the bank by checking the features array in [GET Institution](https://docs.yapily.com/api/reference/#operation/getInstitution). <br><br>See [Redirect Payment Flows](https://docs.yapily.com/pages/key-concepts/payments/payment-authorisation/redirect-payment-flows/) for more information about this flow.<br><br>Features:<ul><li>`INITIATE_DOMESTIC_PERIODIC_PAYMENT`</li><li>`INITIATE_DOMESTIC_SCHEDULED_PAYMENT`</li><li>`INITIATE_DOMESTIC_SINGLE_INSTANT_PAYMENT`</li><li>`INITIATE_DOMESTIC_SINGLE_PAYMENT`</li><li>`INITIATE_INTERNATIONAL_PERIODIC_PAYMENT`</li><li>`INITIATE_INTERNATIONAL_SCHEDULED_PAYMENT`</li><li>`INITIATE_INTERNATIONAL_SINGLE_PAYMENT`</li></ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_payment_authorisation(payment_authorisation_request, async_req=True)
        >>> result = thread.get()

        Args:
            payment_authorisation_request (PaymentAuthorisationRequest):

        Keyword Args:
            psu_id (str): __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.. [optional]
            psu_corporate_id (str): __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.. [optional]
            psu_ip_address (str): __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.. [optional]
            raw (bool): __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ApiResponseOfPaymentAuthorisationRequestResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['payment_authorisation_request'] = \
            payment_authorisation_request
        return self.create_payment_authorisation_endpoint.call_with_http_info(**kwargs)

    def create_payment_pre_authorisation_request(
        self,
        payment_pre_authorisation_request,
        **kwargs
    ):
        """Create Payment Pre-authorisation  # noqa: E501

        Used to initiate the pre-authorisation process for payments for CbiGlobe `Institution` that contains the `INITIATE_ONETIME_PRE_AUTHORISATION_PAYMENTS` feature to authenticate the user. <br><br>Feature: `INITIATE_ONETIME_PRE_AUTHORISATION_PAYMENTS`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_payment_pre_authorisation_request(payment_pre_authorisation_request, async_req=True)
        >>> result = thread.get()

        Args:
            payment_pre_authorisation_request (PaymentPreAuthorisationRequest):

        Keyword Args:
            raw (bool): __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ApiResponseOfAccountAuthorisationResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['payment_pre_authorisation_request'] = \
            payment_pre_authorisation_request
        return self.create_payment_pre_authorisation_request_endpoint.call_with_http_info(**kwargs)

    def create_pre_authorisation_request(
        self,
        pre_authorisation_request,
        **kwargs
    ):
        """Create Pre-authorisation  # noqa: E501

        Used to initiate the pre-authorisation process for any `Institution` that contains the `INITIATE_PRE_AUTHORISATION` feature to authenticate the user. <br><br>Feature: `INITIATE_PRE_AUTHORISATION`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_pre_authorisation_request(pre_authorisation_request, async_req=True)
        >>> result = thread.get()

        Args:
            pre_authorisation_request (PreAuthorisationRequest):

        Keyword Args:
            raw (bool): __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ApiResponseOfAccountAuthorisationResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['pre_authorisation_request'] = \
            pre_authorisation_request
        return self.create_pre_authorisation_request_endpoint.call_with_http_info(**kwargs)

    def initiate_account_request(
        self,
        account_authorisation_request,
        **kwargs
    ):
        """Create Account Authorisation  # noqa: E501

        Used to initiate the authorisation process and direct users to the login screen of their financial institution in order to give consent to access account data.<br><br>See [Redirect Account Flows](https://docs.yapily.com/pages/key-concepts/account-data/account-authorisation/redirect-account-flows/) for more information about this flow.<br><br>Feature: `INITIATE_ACCOUNT_REQUEST`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.initiate_account_request(account_authorisation_request, async_req=True)
        >>> result = thread.get()

        Args:
            account_authorisation_request (AccountAuthorisationRequest):

        Keyword Args:
            psu_id (str): __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.. [optional]
            psu_corporate_id (str): __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.. [optional]
            psu_ip_address (str): __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.. [optional]
            raw (bool): __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ApiResponseOfAccountAuthorisationResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['account_authorisation_request'] = \
            account_authorisation_request
        return self.initiate_account_request_endpoint.call_with_http_info(**kwargs)

    def initiate_embedded_account_request(
        self,
        embedded_account_authorisation_request,
        **kwargs
    ):
        """Create Embedded Account Authorisation  # noqa: E501

        Used to initiate the embedded authorisation process for an `Institution` that contains the `INITIATE_EMBEDDED_ACCOUNT_REQUEST` feature in order to obtain the the user's authorisation to access their account information. <br><br>See [Embedded Account Flows](https://docs.yapily.com/pages/key-concepts/account-data/account-authorisation/embedded-account-flows/) for more information about this flow.<br><br>Feature: `INITIATE_EMBEDDED_ACCOUNT_REQUEST`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.initiate_embedded_account_request(embedded_account_authorisation_request, async_req=True)
        >>> result = thread.get()

        Args:
            embedded_account_authorisation_request (EmbeddedAccountAuthorisationRequest):

        Keyword Args:
            psu_id (str): __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.. [optional]
            psu_corporate_id (str): __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.. [optional]
            psu_ip_address (str): __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.. [optional]
            raw (bool): __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ApiResponseOfEmbeddedAccountAuthorisationResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['embedded_account_authorisation_request'] = \
            embedded_account_authorisation_request
        return self.initiate_embedded_account_request_endpoint.call_with_http_info(**kwargs)

    def re_authorise_account(
        self,
        consent,
        **kwargs
    ):
        """Re-authorise Account Consent  # noqa: E501

        Used to prompt the account holder for continued access to their financial data. This endpoint should be used when a `Consent` that was previously `AUTHORIZED` can no longer be used to retrieve data.<br><br>See [Re-Authorisation](https://docs.yapily.com/pages/key-concepts/account-data/account-consents/#re-authorisation) for more information.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.re_authorise_account(consent, async_req=True)
        >>> result = thread.get()

        Args:
            consent (str): __Mandatory__. The `consent-token` containing the user's authorisation to make the request.

        Keyword Args:
            psu_id (str): __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.. [optional]
            psu_corporate_id (str): __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.. [optional]
            psu_ip_address (str): __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.. [optional]
            raw (bool): __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ApiResponseOfAccountAuthorisationResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['consent'] = \
            consent
        return self.re_authorise_account_endpoint.call_with_http_info(**kwargs)

    def update_embedded_account_request(
        self,
        consent_id,
        embedded_account_authorisation_request,
        **kwargs
    ):
        """Update Embedded Account Authorisation  # noqa: E501

        Used to pass the SCA Code received from the `Institution` (and the SCA method selected by the user where multiple SCA methods are supported by the `Institution`) in order to complete the embedded authorisation to access the user's financial data. <br><br>See [Embedded Account Flows](https://docs.yapily.com/pages/key-concepts/account-data/account-authorisation/embedded-account-flows/) for more information about this flow.<br><br>Feature: `INITIATE_EMBEDDED_ACCOUNT_REQUEST`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_embedded_account_request(consent_id, embedded_account_authorisation_request, async_req=True)
        >>> result = thread.get()

        Args:
            consent_id (str): __Mandatory__. The consent Id of the `Consent` to update.
            embedded_account_authorisation_request (EmbeddedAccountAuthorisationRequest):

        Keyword Args:
            psu_id (str): __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.. [optional]
            psu_corporate_id (str): __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.. [optional]
            psu_ip_address (str): __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.. [optional]
            raw (bool): __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ApiResponseOfEmbeddedAccountAuthorisationResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['consent_id'] = \
            consent_id
        kwargs['embedded_account_authorisation_request'] = \
            embedded_account_authorisation_request
        return self.update_embedded_account_request_endpoint.call_with_http_info(**kwargs)

    def update_embedded_bulk_payment_authorisation(
        self,
        consent_id,
        bulk_payment_embedded_authorisation_request,
        **kwargs
    ):
        """Update Embedded Bulk Payment Authorisation  # noqa: E501

        Used to pass the SCA Code received from the `Institution` (and the SCA method selected by the user where multiple SCA methods are supported by the `Institution`) in order to complete the embedded authorisation to initiate a bulk payment. See [Bulk Payments](https://docs.yapily.com/pages/key-concepts/payments/payment-execution/bulk-payments/) for more information. <br><br>See [Embedded Payment Flows](https://docs.yapily.com/pages/key-concepts/payments/payment-authorisation/embedded-payment-flows/) for more information about this flow.<br><br>Feature: `INITIATE_EMBEDDED_BULK_PAYMENT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_embedded_bulk_payment_authorisation(consent_id, bulk_payment_embedded_authorisation_request, async_req=True)
        >>> result = thread.get()

        Args:
            consent_id (str): __Mandatory__. The consent Id of the `Consent` to update.
            bulk_payment_embedded_authorisation_request (BulkPaymentEmbeddedAuthorisationRequest):

        Keyword Args:
            psu_id (str): __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.. [optional]
            psu_corporate_id (str): __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.. [optional]
            psu_ip_address (str): __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.. [optional]
            raw (bool): __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ApiResponseOfPaymentEmbeddedAuthorisationRequestResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['consent_id'] = \
            consent_id
        kwargs['bulk_payment_embedded_authorisation_request'] = \
            bulk_payment_embedded_authorisation_request
        return self.update_embedded_bulk_payment_authorisation_endpoint.call_with_http_info(**kwargs)

    def update_embedded_payment_authorisation(
        self,
        consent_id,
        payment_embedded_authorisation_request,
        **kwargs
    ):
        """Update Embedded Payment Authorisation  # noqa: E501

        Used to pass the SCA Code received from the `Institution` (and the SCA method selected by the user where multiple SCA methods are supported by the `Institution`) in order to complete the embedded authorisation to initiate a payment. <br><br> See [Embedded Payment Flows](https://docs.yapily.com/guides/payments/payment-authorisation-flows/embedded/) for more information about this flow.<br><br>Feature: `INITIATE_EMBEDDED_DOMESTIC_SINGLE_PAYMENT`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_embedded_payment_authorisation(consent_id, payment_embedded_authorisation_request, async_req=True)
        >>> result = thread.get()

        Args:
            consent_id (str): __Mandatory__. The consent Id of the `Consent` to update.
            payment_embedded_authorisation_request (PaymentEmbeddedAuthorisationRequest):

        Keyword Args:
            psu_id (str): __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.. [optional]
            psu_corporate_id (str): __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.. [optional]
            psu_ip_address (str): __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.. [optional]
            raw (bool): __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ApiResponseOfPaymentEmbeddedAuthorisationRequestResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['consent_id'] = \
            consent_id
        kwargs['payment_embedded_authorisation_request'] = \
            payment_embedded_authorisation_request
        return self.update_embedded_payment_authorisation_endpoint.call_with_http_info(**kwargs)

    def update_payment_authorisation(
        self,
        consent,
        payment_authorisation_request,
        **kwargs
    ):
        """Update Payment Pre-authorisation  # noqa: E501

        Used to continue the authorisation process and for any `Institution` that contains the `INITIATE_PRE_AUTHORISATION` feature and direct user to the login screen of their financial institution in order to give consent to initiate a payment. <br><br>See [Redirect Payment Flows](https://docs.yapily.com/pages/key-concepts/payments/payment-authorisation/redirect-payment-flows/) for more information about this flow. <br><br>Feature: `INITIATE_PRE_AUTHORISATION`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_payment_authorisation(consent, payment_authorisation_request, async_req=True)
        >>> result = thread.get()

        Args:
            consent (str): __Mandatory__. The `consent-token` containing the user's authorisation to make the request.
            payment_authorisation_request (PaymentAuthorisationRequest):

        Keyword Args:
            psu_id (str): __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.. [optional]
            psu_corporate_id (str): __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.. [optional]
            psu_ip_address (str): __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.. [optional]
            raw (bool): __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ApiResponseOfPaymentAuthorisationRequestResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['consent'] = \
            consent
        kwargs['payment_authorisation_request'] = \
            payment_authorisation_request
        return self.update_payment_authorisation_endpoint.call_with_http_info(**kwargs)

    def update_pre_authorise_account_consent(
        self,
        consent,
        account_authorisation_request,
        **kwargs
    ):
        """Update Account Pre-authorisation  # noqa: E501

        Used to continue the authorisation process and for any `Institution` that contains the `INITIATE_PRE_AUTHORISATION` feature and direct user to the login screen of their financial institution in order to give consent to access account data. <br><br>See [Redirect Account Flows](https://docs.yapily.com/pages/key-concepts/account-data/account-authorisation/redirect-account-flows/) for more information about this flow. <br><br>Features: <ul><li>`INITIATE_ACCOUNT_REQUEST`</li><li>`INITIATE_PRE_AUTHORISATION`</li></ul>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_pre_authorise_account_consent(consent, account_authorisation_request, async_req=True)
        >>> result = thread.get()

        Args:
            consent (str): __Mandatory__. The `consent-token` containing the user's authorisation to make the request.
            account_authorisation_request (AccountAuthorisationRequest):

        Keyword Args:
            psu_id (str): __Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.. [optional]
            psu_corporate_id (str): __Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.. [optional]
            psu_ip_address (str): __Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/pages/knowledge/open-banking/psu_identifiers/) to see if this header is required.. [optional]
            raw (bool): __Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _spec_property_naming (bool): True if the variable names in the input data
                are serialized names, as specified in the OpenAPI document.
                False if the variable names in the input data
                are pythonic names, e.g. snake case (default)
            _content_type (str/None): force body content-type.
                Default is None and content-type will be predicted by allowed
                content-types and body.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ApiResponseOfAccountAuthorisationResponse
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_spec_property_naming'] = kwargs.get(
            '_spec_property_naming', False
        )
        kwargs['_content_type'] = kwargs.get(
            '_content_type')
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['consent'] = \
            consent
        kwargs['account_authorisation_request'] = \
            account_authorisation_request
        return self.update_pre_authorise_account_consent_endpoint.call_with_http_info(**kwargs)

