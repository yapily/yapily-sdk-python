"""
    Yapily API

    The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.  # noqa: E501

    The version of the OpenAPI document: 2.15.0
    Contact: support@yapily.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from yapily.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from yapily.exceptions import ApiAttributeError


def lazy_import():
    from yapily.model.authorisation_status import AuthorisationStatus
    from yapily.model.feature_enum import FeatureEnum
    from yapily.model.sca_method import ScaMethod
    globals()['AuthorisationStatus'] = AuthorisationStatus
    globals()['FeatureEnum'] = FeatureEnum
    globals()['ScaMethod'] = ScaMethod


class EmbeddedAccountAuthorisationResponse(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
        ('feature_scope',): {
        },
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'id': (str,),  # noqa: E501
            'user_uuid': (str,),  # noqa: E501
            'application_user_id': (str,),  # noqa: E501
            'reference_id': (str,),  # noqa: E501
            'institution_id': (str,),  # noqa: E501
            'status': (AuthorisationStatus,),  # noqa: E501
            'created_at': (datetime,),  # noqa: E501
            'transaction_from': (datetime,),  # noqa: E501
            'transaction_to': (datetime,),  # noqa: E501
            'expires_at': (datetime,),  # noqa: E501
            'time_to_expire_in_millis': (int,),  # noqa: E501
            'time_to_expire': (str,),  # noqa: E501
            'feature_scope': ([FeatureEnum],),  # noqa: E501
            'consent_token': (str,),  # noqa: E501
            'state': (str,),  # noqa: E501
            'authorized_at': (datetime,),  # noqa: E501
            'institution_consent_id': (str,),  # noqa: E501
            'authorisation_url': (str,),  # noqa: E501
            'qr_code_url': (str,),  # noqa: E501
            'sca_methods': ([ScaMethod],),  # noqa: E501
            'selected_sca_method': (ScaMethod,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'id': 'id',  # noqa: E501
        'user_uuid': 'userUuid',  # noqa: E501
        'application_user_id': 'applicationUserId',  # noqa: E501
        'reference_id': 'referenceId',  # noqa: E501
        'institution_id': 'institutionId',  # noqa: E501
        'status': 'status',  # noqa: E501
        'created_at': 'createdAt',  # noqa: E501
        'transaction_from': 'transactionFrom',  # noqa: E501
        'transaction_to': 'transactionTo',  # noqa: E501
        'expires_at': 'expiresAt',  # noqa: E501
        'time_to_expire_in_millis': 'timeToExpireInMillis',  # noqa: E501
        'time_to_expire': 'timeToExpire',  # noqa: E501
        'feature_scope': 'featureScope',  # noqa: E501
        'consent_token': 'consentToken',  # noqa: E501
        'state': 'state',  # noqa: E501
        'authorized_at': 'authorizedAt',  # noqa: E501
        'institution_consent_id': 'institutionConsentId',  # noqa: E501
        'authorisation_url': 'authorisationUrl',  # noqa: E501
        'qr_code_url': 'qrCodeUrl',  # noqa: E501
        'sca_methods': 'scaMethods',  # noqa: E501
        'selected_sca_method': 'selectedScaMethod',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """EmbeddedAccountAuthorisationResponse - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            id (str): `User` for which the authorisation request was created.. [optional]  # noqa: E501
            user_uuid (str): __Conditional__. User-friendly identifier of the `User` that provides authorisation. If a `User` with the specified `applicationUserId` exists, it will be used otherwise, a new `User` with the specified `applicationUserId` will be created and used. Either the `userUuid` or `applicationUserId` must be provided.. [optional]  # noqa: E501
            application_user_id (str): __Conditional__. The user-friendly reference to the `User` that will authorise the authorisation request. If a `User` with the specified `applicationUserId` exists, it will be used otherwise, a new `User` with the specified `applicationUserId` will be created and used. Either the `userUuid` or `applicationUserId` must be provided.. [optional]  # noqa: E501
            reference_id (str): [optional]  # noqa: E501
            institution_id (str): __Mandatory__. The `Institution` the authorisation request is sent to.. [optional]  # noqa: E501
            status (AuthorisationStatus): [optional]  # noqa: E501
            created_at (datetime): Date and time of when the embedded authorisation was created by the application user.. [optional]  # noqa: E501
            transaction_from (datetime): When performing a transaction query using the consent, this is the earliest date of transaction records that can be retrieved.. [optional]  # noqa: E501
            transaction_to (datetime): When performing a transaction query using the consent, this is the latest date of transaction records that can be retrieved.. [optional]  # noqa: E501
            expires_at (datetime): Date and time of when the embedded authorisation will expire by. Reauthorisation will be needed to retain access.. [optional]  # noqa: E501
            time_to_expire_in_millis (int): [optional]  # noqa: E501
            time_to_expire (str): [optional]  # noqa: E501
            feature_scope ([FeatureEnum]): The set of features that the consent will provide access to.. [optional]  # noqa: E501
            consent_token (str): Represents the authorisation to gain access to the requested features. Required to access account information or make a payment request.. [optional]  # noqa: E501
            state (str): Corellation ID used when handshaking with a new insitution via OAuth2 registration.. [optional]  # noqa: E501
            authorized_at (datetime): Date and time of when the request was authorised by the Institution.. [optional]  # noqa: E501
            institution_consent_id (str): Identification of the consent at the Institution.. [optional]  # noqa: E501
            authorisation_url (str): [optional]  # noqa: E501
            qr_code_url (str): The URL link for the QR code that may be scanned via a mobile device to make a authorisation redirect to the bank (authURL encoded).. [optional]  # noqa: E501
            sca_methods ([ScaMethod]): List of `SCA methods` the `Institution` supports and that are available for selection.. [optional]  # noqa: E501
            selected_sca_method (ScaMethod): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """EmbeddedAccountAuthorisationResponse - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            id (str): `User` for which the authorisation request was created.. [optional]  # noqa: E501
            user_uuid (str): __Conditional__. User-friendly identifier of the `User` that provides authorisation. If a `User` with the specified `applicationUserId` exists, it will be used otherwise, a new `User` with the specified `applicationUserId` will be created and used. Either the `userUuid` or `applicationUserId` must be provided.. [optional]  # noqa: E501
            application_user_id (str): __Conditional__. The user-friendly reference to the `User` that will authorise the authorisation request. If a `User` with the specified `applicationUserId` exists, it will be used otherwise, a new `User` with the specified `applicationUserId` will be created and used. Either the `userUuid` or `applicationUserId` must be provided.. [optional]  # noqa: E501
            reference_id (str): [optional]  # noqa: E501
            institution_id (str): __Mandatory__. The `Institution` the authorisation request is sent to.. [optional]  # noqa: E501
            status (AuthorisationStatus): [optional]  # noqa: E501
            created_at (datetime): Date and time of when the embedded authorisation was created by the application user.. [optional]  # noqa: E501
            transaction_from (datetime): When performing a transaction query using the consent, this is the earliest date of transaction records that can be retrieved.. [optional]  # noqa: E501
            transaction_to (datetime): When performing a transaction query using the consent, this is the latest date of transaction records that can be retrieved.. [optional]  # noqa: E501
            expires_at (datetime): Date and time of when the embedded authorisation will expire by. Reauthorisation will be needed to retain access.. [optional]  # noqa: E501
            time_to_expire_in_millis (int): [optional]  # noqa: E501
            time_to_expire (str): [optional]  # noqa: E501
            feature_scope ([FeatureEnum]): The set of features that the consent will provide access to.. [optional]  # noqa: E501
            consent_token (str): Represents the authorisation to gain access to the requested features. Required to access account information or make a payment request.. [optional]  # noqa: E501
            state (str): Corellation ID used when handshaking with a new insitution via OAuth2 registration.. [optional]  # noqa: E501
            authorized_at (datetime): Date and time of when the request was authorised by the Institution.. [optional]  # noqa: E501
            institution_consent_id (str): Identification of the consent at the Institution.. [optional]  # noqa: E501
            authorisation_url (str): [optional]  # noqa: E501
            qr_code_url (str): The URL link for the QR code that may be scanned via a mobile device to make a authorisation redirect to the bank (authURL encoded).. [optional]  # noqa: E501
            sca_methods ([ScaMethod]): List of `SCA methods` the `Institution` supports and that are available for selection.. [optional]  # noqa: E501
            selected_sca_method (ScaMethod): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
