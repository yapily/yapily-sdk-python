"""
    Yapily API

    The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/pages/home/getting-started/) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/pages/key-concepts/sandbox-credentials/) maybe useful.  # noqa: E501

    The version of the OpenAPI document: 2.15.0
    Contact: support@yapily.com
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from yapily.model_utils import (  # noqa: F401
    ApiTypeError,
    ModelComposed,
    ModelNormal,
    ModelSimple,
    cached_property,
    change_keys_js_to_python,
    convert_js_args_to_python_args,
    date,
    datetime,
    file_type,
    none_type,
    validate_get_composed_info,
    OpenApiModel
)
from yapily.exceptions import ApiAttributeError


def lazy_import():
    from yapily.model.amount import Amount
    from yapily.model.exchange_rate_information_response import ExchangeRateInformationResponse
    from yapily.model.frequency_response import FrequencyResponse
    from yapily.model.payee import Payee
    from yapily.model.payer import Payer
    from yapily.model.payment_charge_details import PaymentChargeDetails
    from yapily.model.payment_status import PaymentStatus
    from yapily.model.payment_status_details import PaymentStatusDetails
    from yapily.model.priority_code_enum import PriorityCodeEnum
    from yapily.model.refund_account import RefundAccount
    globals()['Amount'] = Amount
    globals()['ExchangeRateInformationResponse'] = ExchangeRateInformationResponse
    globals()['FrequencyResponse'] = FrequencyResponse
    globals()['Payee'] = Payee
    globals()['Payer'] = Payer
    globals()['PaymentChargeDetails'] = PaymentChargeDetails
    globals()['PaymentStatus'] = PaymentStatus
    globals()['PaymentStatusDetails'] = PaymentStatusDetails
    globals()['PriorityCodeEnum'] = PriorityCodeEnum
    globals()['RefundAccount'] = RefundAccount


class PaymentResponse(ModelNormal):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Attributes:
      allowed_values (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          with a capitalized key describing the allowed value and an allowed
          value. These dicts store the allowed enum values.
      attribute_map (dict): The key is attribute name
          and the value is json key in definition.
      discriminator_value_class_map (dict): A dict to go from the discriminator
          variable value to the discriminator class name.
      validations (dict): The key is the tuple path to the attribute
          and the for var_name this is (var_name,). The value is a dict
          that stores validations for max_length, min_length, max_items,
          min_items, exclusive_maximum, inclusive_maximum, exclusive_minimum,
          inclusive_minimum, and regex.
      additional_properties_type (tuple): A tuple of classes accepted
          as additional properties values.
    """

    allowed_values = {
    }

    validations = {
    }

    @cached_property
    def additional_properties_type():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded
        """
        lazy_import()
        return (bool, date, datetime, dict, float, int, list, str, none_type,)  # noqa: E501

    _nullable = False

    @cached_property
    def openapi_types():
        """
        This must be a method because a model may have properties that are
        of type self, this must run after the class is loaded

        Returns
            openapi_types (dict): The key is attribute name
                and the value is attribute type.
        """
        lazy_import()
        return {
            'id': (str,),  # noqa: E501
            'institution_consent_id': (str,),  # noqa: E501
            'payment_idempotency_id': (str,),  # noqa: E501
            'payment_lifecycle_id': (str,),  # noqa: E501
            'status': (PaymentStatus,),  # noqa: E501
            'status_details': (PaymentStatusDetails,),  # noqa: E501
            'payer': (Payer,),  # noqa: E501
            'payee_details': (Payee,),  # noqa: E501
            'reference': (str,),  # noqa: E501
            'amount': (float,),  # noqa: E501
            'currency': (str,),  # noqa: E501
            'amount_details': (Amount,),  # noqa: E501
            'created_at': (datetime,),  # noqa: E501
            'first_payment_amount': (Amount,),  # noqa: E501
            'first_payment_date_time': (datetime,),  # noqa: E501
            'next_payment_amount': (Amount,),  # noqa: E501
            'next_payment_date_time': (datetime,),  # noqa: E501
            'final_payment_amount': (Amount,),  # noqa: E501
            'final_payment_date_time': (datetime,),  # noqa: E501
            'number_of_payments': (int,),  # noqa: E501
            'previous_payment_amount': (Amount,),  # noqa: E501
            'previous_payment_date_time': (datetime,),  # noqa: E501
            'charge_details': ([PaymentChargeDetails],),  # noqa: E501
            'scheduled_payment_type': (str,),  # noqa: E501
            'scheduled_payment_date_time': (datetime,),  # noqa: E501
            'frequency': (FrequencyResponse,),  # noqa: E501
            'currency_of_transfer': (str,),  # noqa: E501
            'purpose': (str,),  # noqa: E501
            'priority': (PriorityCodeEnum,),  # noqa: E501
            'exchange_rate': (ExchangeRateInformationResponse,),  # noqa: E501
            'refund_account': (RefundAccount,),  # noqa: E501
            'bulk_amount_sum': (float,),  # noqa: E501
        }

    @cached_property
    def discriminator():
        return None


    attribute_map = {
        'id': 'id',  # noqa: E501
        'institution_consent_id': 'institutionConsentId',  # noqa: E501
        'payment_idempotency_id': 'paymentIdempotencyId',  # noqa: E501
        'payment_lifecycle_id': 'paymentLifecycleId',  # noqa: E501
        'status': 'status',  # noqa: E501
        'status_details': 'statusDetails',  # noqa: E501
        'payer': 'payer',  # noqa: E501
        'payee_details': 'payeeDetails',  # noqa: E501
        'reference': 'reference',  # noqa: E501
        'amount': 'amount',  # noqa: E501
        'currency': 'currency',  # noqa: E501
        'amount_details': 'amountDetails',  # noqa: E501
        'created_at': 'createdAt',  # noqa: E501
        'first_payment_amount': 'firstPaymentAmount',  # noqa: E501
        'first_payment_date_time': 'firstPaymentDateTime',  # noqa: E501
        'next_payment_amount': 'nextPaymentAmount',  # noqa: E501
        'next_payment_date_time': 'nextPaymentDateTime',  # noqa: E501
        'final_payment_amount': 'finalPaymentAmount',  # noqa: E501
        'final_payment_date_time': 'finalPaymentDateTime',  # noqa: E501
        'number_of_payments': 'numberOfPayments',  # noqa: E501
        'previous_payment_amount': 'previousPaymentAmount',  # noqa: E501
        'previous_payment_date_time': 'previousPaymentDateTime',  # noqa: E501
        'charge_details': 'chargeDetails',  # noqa: E501
        'scheduled_payment_type': 'scheduledPaymentType',  # noqa: E501
        'scheduled_payment_date_time': 'scheduledPaymentDateTime',  # noqa: E501
        'frequency': 'frequency',  # noqa: E501
        'currency_of_transfer': 'currencyOfTransfer',  # noqa: E501
        'purpose': 'purpose',  # noqa: E501
        'priority': 'priority',  # noqa: E501
        'exchange_rate': 'exchangeRate',  # noqa: E501
        'refund_account': 'refundAccount',  # noqa: E501
        'bulk_amount_sum': 'bulkAmountSum',  # noqa: E501
    }

    read_only_vars = {
    }

    _composed_schemas = {}

    @classmethod
    @convert_js_args_to_python_args
    def _from_openapi_data(cls, *args, **kwargs):  # noqa: E501
        """PaymentResponse - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            id (str): [optional]  # noqa: E501
            institution_consent_id (str): [optional]  # noqa: E501
            payment_idempotency_id (str): [optional]  # noqa: E501
            payment_lifecycle_id (str): [optional]  # noqa: E501
            status (PaymentStatus): [optional]  # noqa: E501
            status_details (PaymentStatusDetails): [optional]  # noqa: E501
            payer (Payer): [optional]  # noqa: E501
            payee_details (Payee): [optional]  # noqa: E501
            reference (str): [optional]  # noqa: E501
            amount (float): [optional]  # noqa: E501
            currency (str): [optional]  # noqa: E501
            amount_details (Amount): [optional]  # noqa: E501
            created_at (datetime): [optional]  # noqa: E501
            first_payment_amount (Amount): [optional]  # noqa: E501
            first_payment_date_time (datetime): [optional]  # noqa: E501
            next_payment_amount (Amount): [optional]  # noqa: E501
            next_payment_date_time (datetime): [optional]  # noqa: E501
            final_payment_amount (Amount): [optional]  # noqa: E501
            final_payment_date_time (datetime): [optional]  # noqa: E501
            number_of_payments (int): [optional]  # noqa: E501
            previous_payment_amount (Amount): [optional]  # noqa: E501
            previous_payment_date_time (datetime): [optional]  # noqa: E501
            charge_details ([PaymentChargeDetails]): [optional]  # noqa: E501
            scheduled_payment_type (str): [optional]  # noqa: E501
            scheduled_payment_date_time (datetime): [optional]  # noqa: E501
            frequency (FrequencyResponse): [optional]  # noqa: E501
            currency_of_transfer (str): [optional]  # noqa: E501
            purpose (str): [optional]  # noqa: E501
            priority (PriorityCodeEnum): [optional]  # noqa: E501
            exchange_rate (ExchangeRateInformationResponse): [optional]  # noqa: E501
            refund_account (RefundAccount): [optional]  # noqa: E501
            bulk_amount_sum (float): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        self = super(OpenApiModel, cls).__new__(cls)

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
        return self

    required_properties = set([
        '_data_store',
        '_check_type',
        '_spec_property_naming',
        '_path_to_item',
        '_configuration',
        '_visited_composed_classes',
    ])

    @convert_js_args_to_python_args
    def __init__(self, *args, **kwargs):  # noqa: E501
        """PaymentResponse - a model defined in OpenAPI

        Keyword Args:
            _check_type (bool): if True, values for parameters in openapi_types
                                will be type checked and a TypeError will be
                                raised if the wrong type is input.
                                Defaults to True
            _path_to_item (tuple/list): This is a list of keys or values to
                                drill down to the model in received_data
                                when deserializing a response
            _spec_property_naming (bool): True if the variable names in the input data
                                are serialized names, as specified in the OpenAPI document.
                                False if the variable names in the input data
                                are pythonic names, e.g. snake case (default)
            _configuration (Configuration): the instance to use when
                                deserializing a file_type parameter.
                                If passed, type conversion is attempted
                                If omitted no type conversion is done.
            _visited_composed_classes (tuple): This stores a tuple of
                                classes that we have traveled through so that
                                if we see that class again we will not use its
                                discriminator again.
                                When traveling through a discriminator, the
                                composed schema that is
                                is traveled through is added to this set.
                                For example if Animal has a discriminator
                                petType and we pass in "Dog", and the class Dog
                                allOf includes Animal, we move through Animal
                                once using the discriminator, and pick Dog.
                                Then in Dog, we will make an instance of the
                                Animal class but this time we won't travel
                                through its discriminator because we passed in
                                _visited_composed_classes = (Animal,)
            id (str): [optional]  # noqa: E501
            institution_consent_id (str): [optional]  # noqa: E501
            payment_idempotency_id (str): [optional]  # noqa: E501
            payment_lifecycle_id (str): [optional]  # noqa: E501
            status (PaymentStatus): [optional]  # noqa: E501
            status_details (PaymentStatusDetails): [optional]  # noqa: E501
            payer (Payer): [optional]  # noqa: E501
            payee_details (Payee): [optional]  # noqa: E501
            reference (str): [optional]  # noqa: E501
            amount (float): [optional]  # noqa: E501
            currency (str): [optional]  # noqa: E501
            amount_details (Amount): [optional]  # noqa: E501
            created_at (datetime): [optional]  # noqa: E501
            first_payment_amount (Amount): [optional]  # noqa: E501
            first_payment_date_time (datetime): [optional]  # noqa: E501
            next_payment_amount (Amount): [optional]  # noqa: E501
            next_payment_date_time (datetime): [optional]  # noqa: E501
            final_payment_amount (Amount): [optional]  # noqa: E501
            final_payment_date_time (datetime): [optional]  # noqa: E501
            number_of_payments (int): [optional]  # noqa: E501
            previous_payment_amount (Amount): [optional]  # noqa: E501
            previous_payment_date_time (datetime): [optional]  # noqa: E501
            charge_details ([PaymentChargeDetails]): [optional]  # noqa: E501
            scheduled_payment_type (str): [optional]  # noqa: E501
            scheduled_payment_date_time (datetime): [optional]  # noqa: E501
            frequency (FrequencyResponse): [optional]  # noqa: E501
            currency_of_transfer (str): [optional]  # noqa: E501
            purpose (str): [optional]  # noqa: E501
            priority (PriorityCodeEnum): [optional]  # noqa: E501
            exchange_rate (ExchangeRateInformationResponse): [optional]  # noqa: E501
            refund_account (RefundAccount): [optional]  # noqa: E501
            bulk_amount_sum (float): [optional]  # noqa: E501
        """

        _check_type = kwargs.pop('_check_type', True)
        _spec_property_naming = kwargs.pop('_spec_property_naming', False)
        _path_to_item = kwargs.pop('_path_to_item', ())
        _configuration = kwargs.pop('_configuration', None)
        _visited_composed_classes = kwargs.pop('_visited_composed_classes', ())

        if args:
            raise ApiTypeError(
                "Invalid positional arguments=%s passed to %s. Remove those invalid positional arguments." % (
                    args,
                    self.__class__.__name__,
                ),
                path_to_item=_path_to_item,
                valid_classes=(self.__class__,),
            )

        self._data_store = {}
        self._check_type = _check_type
        self._spec_property_naming = _spec_property_naming
        self._path_to_item = _path_to_item
        self._configuration = _configuration
        self._visited_composed_classes = _visited_composed_classes + (self.__class__,)

        for var_name, var_value in kwargs.items():
            if var_name not in self.attribute_map and \
                        self._configuration is not None and \
                        self._configuration.discard_unknown_keys and \
                        self.additional_properties_type is None:
                # discard variable.
                continue
            setattr(self, var_name, var_value)
            if var_name in self.read_only_vars:
                raise ApiAttributeError(f"`{var_name}` is a read-only attribute. Use `from_openapi_data` to instantiate "
                                     f"class with read only attributes.")
